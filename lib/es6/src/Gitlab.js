// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Dict$Std from "@prefix_re/std/lib/es6/src/Dict.js";
import * as File$Std from "@prefix_re/std/lib/es6/src/Deno/File.js";
import * as Yaml$Std from "@prefix_re/std/lib/es6/src/Deno/Yaml.js";
import * as Array$Std from "@prefix_re/std/lib/es6/src/Array.js";

function chunk(array, size) {
  var cur = Array$Std.slice(array, 0, size);
  var rest = Array$Std.slice(array, size, Array$Std.length(array) - size | 0);
  var match = Array$Std.length(rest);
  if (match !== 0) {
    return Array$Std.concat([cur], chunk(rest, size));
  } else {
    return [cur];
  }
}

var base = ".conan:\n  variables:\n    CONAN_USER_HOME: \"$CI_PROJECT_DIR\"\n    CONAN_DATA_PATH: \"$CI_PROJECT_DIR/conan_data\"\n    GIT_SUBMODULE_STRATEGY: recursive\n    CARGO_HOME: \"$CI_PROJECT_DIR/.cargo\"\n    SCCACHE_DIR: \"$CI_PROJECT_DIR/.sccache\"\n    GIT_CLEAN_FLAGS: -x -f -e $CARGO_HOME/** -e $SCCACHE_DIR/**\n  script:\n    - conan config install $CONAN_CONFIG_URL -sf $CONAN_CONFIG_DIR\n    - conan config set general.default_profile=$PROFILE\n    - conan config set storage.path=$CONAN_DATA_PATH\n    - conan user $CONAN_LOGIN_USERNAME -p $CONAN_LOGIN_PASSWORD -r $CONAN_REPO_ALL\n    - conan user $CONAN_LOGIN_USERNAME -p $CONAN_LOGIN_PASSWORD -r $CONAN_REPO_DEV_ALL\n    - conan user $CONAN_LOGIN_USERNAME -p $CONAN_LOGIN_PASSWORD -r $CONAN_REPO_DEV_INTERNAL\n    - conan user $CONAN_LOGIN_USERNAME -p $CONAN_LOGIN_PASSWORD -r $CONAN_REPO_DEV_PUBLIC\n    - conan create -u $FOLDER $NAME/$VERSION@ $ARGS\n    - conan upload $NAME/$VERSION@ --all -c -r $REPO\n    - \"[[ -n $UPLOAD_ALIAS ]] && conan upload $NAME/$CI_COMMIT_REF_NAME@ --all -c -r $REPO || echo\"\n  retry:\n    max: 2\n    when:\n      - runner_system_failure\n      - stuck_or_timeout_failure\n  artifacts:\n    expire_in: 1 month\n    paths:\n      - \"conan_data/$NAME/$VERSION/_/_/build/*/meson-logs/*-log.txt\"\n      - \"conan_data/$NAME/$VERSION/_/_/build/*/*/meson-logs/*-log.txt\"\n      - \"conan_data/$NAME/$VERSION/_/_/build/*/CMakeFiles/CMake*.log\"\n      - \"conan_data/$NAME/$VERSION/_/_/build/*/*/CMakeFiles/CMake*.log\"\n      - \"conan_data/$NAME/$VERSION/_/_/build/*/*/config.log\"\n    when: always\n  cache:\n    key: \"$CI_RUNNER_EXECUTABLE_ARCH\"\n    paths:\n      - \"$CARGO_HOME\"\n      - \"$SCCACHE_DIR\"\n.conan-x86_64:\n  extends: .conan\n  tags: [x86_64,aws]\n  image: registry.gitlab.com/aivero/open-source/contrib/focal-x86_64-dockerfile:master\n.conan-armv8:\n  extends: .conan\n  tags: [armv8,aws]\n  image: registry.gitlab.com/aivero/open-source/contrib/focal-armv8-dockerfile:master\n.conan-x86_64-bootstrap:\n  extends: .conan-x86_64\n  image: registry.gitlab.com/aivero/open-source/contrib/focal-x86_64-bootstrap-dockerfile:master\n.conan-armv8-bootstrap:\n  extends: .conan-armv8\n  image: registry.gitlab.com/aivero/open-source/contrib/focal-armv8-bootstrap-dockerfile:master\n";

function generate(jobs) {
  var partial_arg = new TextEncoder();
  var encode = function (param) {
    return partial_arg.encode(param);
  };
  var jobs$1 = Array$Std.empty(jobs) ? [Dict$Std.to("empty", {
            extends: undefined,
            variables: undefined,
            image: undefined,
            tags: ["x86_64"],
            script: ["echo"],
            needs: [],
            services: undefined,
            cache: undefined
          })] : jobs;
  return File$Std.write(Curry._1(encode, base + Yaml$Std.stringify(Yaml$Std.classify(Dict$Std.flatten(jobs$1)))), "generated-config.yml");
}

export {
  chunk ,
  base ,
  generate ,
  
}
/* File-Std Not a pure module */
