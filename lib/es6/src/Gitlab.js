// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jobt from "./job/Jobt.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Dict$Std from "@prefix_re/std/lib/es6/src/Dict.js";
import * as File$Std from "@prefix_re/std/lib/es6/src/Deno/File.js";
import * as Yaml$Std from "@prefix_re/std/lib/es6/src/Deno/Yaml.js";
import * as Array$Std from "@prefix_re/std/lib/es6/src/Array.js";

function chunk(array, size) {
  var cur = Array$Std.slice(array, 0, size);
  var rest = Array$Std.slice(array, size, Array$Std.length(array) - size | 0);
  var match = Array$Std.length(rest);
  if (match !== 0) {
    return Array$Std.concat([cur], chunk(rest, size));
  } else {
    return [cur];
  }
}

function generate(jobs) {
  var partial_arg = new TextEncoder();
  var encode = function (param) {
    return partial_arg.encode(param);
  };
  var jobs$1 = Array$Std.empty(jobs) ? [[
        "empty",
        {
          extends: Jobt.$$default.extends,
          variables: Jobt.$$default.variables,
          image: Jobt.$$default.image,
          tags: ["x86_64"],
          before_script: Jobt.$$default.before_script,
          script: ["echo"],
          after_script: Jobt.$$default.after_script,
          needs: Jobt.$$default.needs,
          services: Jobt.$$default.services,
          cache: Jobt.$$default.cache,
          retry: Jobt.$$default.retry,
          artifacts: Jobt.$$default.artifacts,
          when: Jobt.$$default.when,
          allow_failure: Jobt.$$default.allow_failure
        }
      ]] : jobs;
  return File$Std.write(Curry._1(encode, Yaml$Std.stringify(Yaml$Std.classify(Dict$Std.fromArray(jobs$1)))), "generated-config.yml");
}

export {
  chunk ,
  generate ,
  
}
/* File-Std Not a pure module */
