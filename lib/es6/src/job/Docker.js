// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Path from "path";
import * as Env$Std from "@prefix_re/std/lib/es6/src/Deno/Env.js";
import * as Dict$Std from "@prefix_re/std/lib/es6/src/Dict.js";
import * as Hash$Std from "@prefix_re/std/lib/es6/src/Deno/Hash.js";
import * as Path$Std from "@prefix_re/std/lib/es6/src/Deno/Path.js";
import * as Task$Std from "@prefix_re/std/lib/es6/src/Task.js";
import * as Yaml$Std from "@prefix_re/std/lib/es6/src/Deno/Yaml.js";
import * as Array$Std from "@prefix_re/std/lib/es6/src/Array.js";
import * as Tuple$Std from "@prefix_re/std/lib/es6/src/Tuple.js";
import * as Result$Std from "@prefix_re/std/lib/es6/src/Result.js";
import * as String$Std from "@prefix_re/std/lib/es6/src/String.js";

function hashN(__x) {
  return Hash$Std.hashN(__x, 3);
}

function getName(file, folder) {
  var name = String$Std.split(file, ".")[0];
  if (name !== undefined && name !== "Dockerfile") {
    return name;
  } else {
    return Path.basename(folder);
  }
}

function getInstances($$int) {
  var file = Yaml$Std.get($$int.modeInt, "file");
  var file$1;
  file$1 = typeof file === "number" || file.TAG !== /* String */0 ? undefined : file._0;
  var hash = Hash$Std.hashN($$int, 3);
  if (file$1 !== undefined) {
    return [{
              name: $$int.name,
              version: $$int.version,
              tagName: $$int.name,
              file: file$1,
              folder: $$int.folder,
              tags: $$int.tags,
              needs: $$int.needs,
              hash: hash
            }];
  } else {
    return Array$Std.map(Array$Std.filter(Path$Std.read($$int.folder), (function (file) {
                      return String$Std.includes(file.name, "Dockerfile");
                    })), (function (file) {
                  var name = String$Std.split(file.name, ".")[0];
                  var tmp;
                  tmp = name !== undefined && name !== "Dockerfile" ? name : $$int.name;
                  return {
                          name: tmp,
                          version: $$int.version,
                          tagName: $$int.name,
                          file: file.name,
                          folder: $$int.folder,
                          tags: ["gitlab-org-docker"],
                          needs: $$int.needs,
                          hash: hash
                        };
                }));
  }
}

function getJob(param) {
  var hash = param.hash;
  var needs = param.needs;
  var tags = param.tags;
  var folder = param.folder;
  var file = param.file;
  var tagName = param.tagName;
  var version = param.version;
  var name = param.name;
  return Result$Std.map(Result$Std.seq4(Tuple$Std.map4([
                      "DOCKER_USER",
                      "DOCKER_PASSWORD",
                      "DOCKER_REGISTRY",
                      "DOCKER_PREFIX"
                    ], Env$Std.getError)), (function (param) {
                var registry = param[2];
                var dockerTag = registry + param[3] + tagName;
                var match = String$Std.match(version, /^[0-9a-f]{40}$/);
                var branchTagUpload = match !== undefined;
                var script = Array$Std.concat([
                      "docker login --username " + param[0] + " --password " + param[1] + " " + registry,
                      "docker build " + folder + " --file " + Path.join(folder, file) + " --tag " + dockerTag + ":" + version,
                      "docker push " + dockerTag + ":" + version
                    ], branchTagUpload ? [
                        "docker tag " + dockerTag + ":" + version + " " + dockerTag + ":$CI_COMMIT_REF_NAME",
                        "docker push " + dockerTag + ":$CI_COMMIT_REF_NAME"
                      ] : []);
                return Dict$Std.to(name + "/" + version + "@" + hash, {
                            extends: undefined,
                            variables: undefined,
                            image: "docker:19.03.12",
                            tags: tags,
                            script: script,
                            needs: needs,
                            services: ["docker:19.03.12-dind"],
                            cache: undefined
                          });
              }));
}

function getJobs(ints) {
  return Task$Std.fromResult(Result$Std.seq(Array$Std.flatMap(Array$Std.filter(ints, (function ($$int) {
                            return $$int.mode === "docker";
                          })), (function ($$int) {
                        var ints = getInstances($$int);
                        return Array$Std.concat(Array$Std.map(ints, getJob), [{
                                      TAG: /* Ok */0,
                                      _0: Dict$Std.to($$int.name + "/" + $$int.version, {
                                            extends: undefined,
                                            variables: undefined,
                                            image: undefined,
                                            tags: undefined,
                                            script: ["echo"],
                                            needs: Array$Std.map(ints, (function ($$int) {
                                                    return $$int.name + "/" + $$int.version + "@" + $$int.hash;
                                                  })),
                                            services: undefined,
                                            cache: undefined
                                          })
                                    }]);
                      }))));
}

var hashLength = 3;

export {
  hashLength ,
  hashN ,
  getName ,
  getInstances ,
  getJob ,
  getJobs ,
  
}
/* path Not a pure module */
