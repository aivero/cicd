// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jobt from "./Jobt.js";
import * as Env$Std from "@prefix_re/std/lib/es6/src/Deno/Env.js";
import * as Profile from "../Profile.js";
import * as Dict$Std from "@prefix_re/std/lib/es6/src/Dict.js";
import * as Path$Std from "@prefix_re/std/lib/es6/src/Deno/Path.js";
import * as Task$Std from "@prefix_re/std/lib/es6/src/Task.js";
import * as Yaml$Std from "@prefix_re/std/lib/es6/src/Deno/Yaml.js";
import * as Array$Std from "@prefix_re/std/lib/es6/src/Array.js";
import * as Tuple$Std from "@prefix_re/std/lib/es6/src/Tuple.js";
import * as Result$Std from "@prefix_re/std/lib/es6/src/Result.js";
import * as String$Std from "@prefix_re/std/lib/es6/src/String.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Console$Std from "@prefix_re/std/lib/es6/src/Console.js";

function getInstances(param) {
  var variables = param.variables;
  var manual = param.manual;
  var tags = param.tags;
  var image = param.image;
  var afterScript = param.afterScript;
  var script = param.script;
  var beforeScript = param.beforeScript;
  var needs = param.needs;
  var modeInt = param.modeInt;
  var folder = param.folder;
  var version = param.version;
  var name = param.name;
  var file = Yaml$Std.get(modeInt, "file");
  var file$1;
  file$1 = typeof file === "number" || file.TAG !== /* String */0 ? undefined : file._0;
  var params = Yaml$Std.get(modeInt, "params");
  var params$1;
  params$1 = typeof params === "number" || params.TAG !== /* Array */3 ? undefined : Array$Std.reduce(params._0, (function (params, p) {
            if (typeof p === "number" || p.TAG !== /* String */0) {
              return params;
            } else {
              return Array$Std.concat(params, [p._0]);
            }
          }), []);
  var match = manual !== undefined && manual ? [
      "manual",
      false
    ] : [
      undefined,
      undefined
    ];
  var allow_failure = match[1];
  var when = match[0];
  return Array$Std.flatMap(param.profiles, (function (profile) {
                if (file$1 !== undefined) {
                  return [{
                            name: name,
                            version: version,
                            profile: profile,
                            file: file$1,
                            folder: folder,
                            tags: tags,
                            needs: needs,
                            image: image,
                            params: params$1,
                            beforeScript: beforeScript,
                            script: script,
                            afterScript: afterScript,
                            when: when,
                            allow_failure: allow_failure,
                            variables: variables
                          }];
                } else {
                  return Array$Std.map(Array$Std.filter(Path$Std.read(folder), (function (file) {
                                    return String$Std.includes(file.name, "Dockerfile");
                                  })), (function (file) {
                                var name$1 = String$Std.split(file.name, ".")[0];
                                var tmp;
                                tmp = name$1 !== undefined && name$1 !== "Dockerfile" ? name$1 : name;
                                return {
                                        name: tmp,
                                        version: version,
                                        profile: profile,
                                        file: file.name,
                                        folder: folder,
                                        tags: ["gitlab-org-docker"],
                                        needs: needs,
                                        image: image,
                                        params: params$1,
                                        beforeScript: beforeScript,
                                        script: script,
                                        afterScript: afterScript,
                                        when: when,
                                        allow_failure: allow_failure,
                                        variables: variables
                                      };
                              }));
                }
              }));
}

function getJob(param) {
  var variables = param.variables;
  var allow_failure = param.allow_failure;
  var when = param.when;
  var afterScript = param.afterScript;
  var script = param.script;
  var beforeScript = param.beforeScript;
  var params = param.params;
  var image = param.image;
  var needs = param.needs;
  var tags = param.tags;
  var folder = param.folder;
  var file = param.file;
  var profile = param.profile;
  var version = param.version;
  var name = param.name;
  Console$Std.log("Found docker instance: " + name + "/" + version + " (" + profile + ")");
  return Result$Std.flatMap(Result$Std.seq4(Tuple$Std.map4([
                      "DOCKER_USER",
                      "DOCKER_PASSWORD",
                      "DOCKER_REGISTRY",
                      "DOCKER_PREFIX"
                    ], Env$Std.getError)), (function (param) {
                var registry = param[2];
                var password = param[1];
                var username = param[0];
                var dockerTag = registry + param[3] + name + "/" + profile;
                var match = String$Std.match(version, /^[0-9a-f]{40}$/);
                var branchTagUpload = match !== undefined;
                var match$1 = Deno.env.get("CI_COMMIT_REF_NAME");
                var latestTagUpload = (match$1 == null) || match$1 !== "master" ? false : true;
                var match$2 = Deno.env.get("DOCKER_CA_CERTIFICATE_KEY");
                var dockerService = (match$2 == null) ? [{
                      command: undefined,
                      name: "docker:20-dind",
                      variables: undefined
                    }] : [{
                      command: [
                        "/bin/sh",
                        "-c",
                        "mkdir -p /usr/local/share/ca-certificates && echo $DOCKER_CA_CERTIFICATE_KEY > /usr/local/share/ca-certificates/my-ca.crt && update-ca-certificates && dockerd-entrypoint.sh"
                      ],
                      name: "docker:20-dind",
                      variables: Caml_option.some(Dict$Std.fromArray([[
                                  "DOCKER_CA_CERTIFICATE_KEY",
                                  "$DOCKER_CA_CERTIFICATE_KEY"
                                ]]))
                    }];
                var image$1 = image !== undefined ? (Console$Std.log("Docker Mode: Image is set, using it as docker image"), image) : (Console$Std.log("Docker Mode: Image is not set, using default docker:20"), "docker:20");
                var tags$1 = Array$Std.empty(tags) ? Result$Std.toOption(Profile.getTags(profile)) : (Console$Std.log("Docker Mode: Tags are set, overriding profile-generated tags"), tags);
                var dockerParams = params !== undefined ? Array$Std.join(params, " ") : (Console$Std.log("Docker Mode: params are NOT set"), "");
                return Result$Std.map(Profile.getPlatform(profile), (function (platform) {
                              var script$1 = Array$Std.empty(script) ? Array$Std.concat(Array$Std.concat([
                                          "docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER",
                                          "docker login --username " + username + " --password " + password + " " + registry,
                                          "docker build . --file " + file + " --platform " + platform + " " + dockerParams + " --tag " + dockerTag + ":" + version,
                                          "docker push " + dockerTag + ":" + version
                                        ], branchTagUpload ? [
                                            "docker tag " + dockerTag + ":" + version + " " + dockerTag + ":$CI_COMMIT_REF_NAME",
                                            "docker push " + dockerTag + ":$CI_COMMIT_REF_NAME"
                                          ] : []), latestTagUpload ? [
                                        "docker tag " + dockerTag + ":" + version + " " + dockerTag + ":latest",
                                        "docker push " + dockerTag + ":latest"
                                      ] : []) : script;
                              return [
                                      name + "/" + version,
                                      {
                                        extends: Jobt.$$default.extends,
                                        variables: Caml_option.some(Dict$Std.concat(Dict$Std.fromArray([
                                                      [
                                                        "DOCKER_TLS_CERTDIR",
                                                        "/certs"
                                                      ],
                                                      [
                                                        "GIT_SUBMODULE_STRATEGY",
                                                        "recursive"
                                                      ]
                                                    ]), variables)),
                                        image: image$1,
                                        tags: tags$1,
                                        before_script: Array$Std.concat(["cd $CI_PROJECT_DIR/" + folder], beforeScript),
                                        script: Array$Std.concat(["cd $CI_PROJECT_DIR/" + folder], script$1),
                                        after_script: Array$Std.concat(["cd $CI_PROJECT_DIR/" + folder], afterScript),
                                        needs: Array$Std.uniq(Array$Std.concat(needs, ["conan-upload"])),
                                        services: dockerService,
                                        cache: Jobt.$$default.cache,
                                        retry: Jobt.$$default.retry,
                                        artifacts: Jobt.$$default.artifacts,
                                        when: when,
                                        allow_failure: allow_failure,
                                        rules: Jobt.$$default.rules,
                                        interruptible: Jobt.$$default.interruptible
                                      }
                                    ];
                            }));
              }));
}

function getJobs(ints) {
  return Task$Std.fromResult(Result$Std.seq(Array$Std.flatMap(Array$Std.filter(ints, (function ($$int) {
                            return $$int.mode === "docker";
                          })), (function ($$int) {
                        return Array$Std.map(getInstances($$int), getJob);
                      }))));
}

export {
  getInstances ,
  getJob ,
  getJobs ,
  
}
/* Yaml-Std Not a pure module */
