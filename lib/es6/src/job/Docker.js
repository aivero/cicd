// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jobt from "./Jobt.js";
import * as Path from "path";
import * as Env$Std from "@prefix_re/std/lib/es6/src/Deno/Env.js";
import * as Path$Std from "@prefix_re/std/lib/es6/src/Deno/Path.js";
import * as Task$Std from "@prefix_re/std/lib/es6/src/Task.js";
import * as Yaml$Std from "@prefix_re/std/lib/es6/src/Deno/Yaml.js";
import * as Array$Std from "@prefix_re/std/lib/es6/src/Array.js";
import * as Tuple$Std from "@prefix_re/std/lib/es6/src/Tuple.js";
import * as Result$Std from "@prefix_re/std/lib/es6/src/Result.js";
import * as String$Std from "@prefix_re/std/lib/es6/src/String.js";

function getName(file, folder) {
  var name = String$Std.split(file, ".")[0];
  if (name !== undefined && name !== "Dockerfile") {
    return name;
  } else {
    return Path.basename(folder);
  }
}

function getInstances(param) {
  var needs = param.needs;
  var folder = param.folder;
  var version = param.version;
  var name = param.name;
  var file = Yaml$Std.get(param.modeInt, "file");
  var file$1;
  file$1 = typeof file === "number" || file.TAG !== /* String */0 ? undefined : file._0;
  if (file$1 !== undefined) {
    return [{
              name: name,
              version: version,
              file: file$1,
              folder: folder,
              tags: param.tags,
              needs: needs
            }];
  } else {
    return Array$Std.map(Array$Std.filter(Path$Std.read(folder), (function (file) {
                      return String$Std.includes(file.name, "Dockerfile");
                    })), (function (file) {
                  var name$1 = String$Std.split(file.name, ".")[0];
                  var tmp;
                  tmp = name$1 !== undefined && name$1 !== "Dockerfile" ? name$1 : name;
                  return {
                          name: tmp,
                          version: version,
                          file: file.name,
                          folder: folder,
                          tags: ["gitlab-org-docker"],
                          needs: needs
                        };
                }));
  }
}

function getJob(param) {
  var needs = param.needs;
  var tags = param.tags;
  var folder = param.folder;
  var file = param.file;
  var version = param.version;
  var name = param.name;
  return Result$Std.map(Result$Std.seq4(Tuple$Std.map4([
                      "DOCKER_USER",
                      "DOCKER_PASSWORD",
                      "DOCKER_REGISTRY",
                      "DOCKER_PREFIX"
                    ], Env$Std.getError)), (function (param) {
                var registry = param[2];
                var dockerTag = registry + param[3] + name;
                var match = String$Std.match(version, /^[0-9a-f]{40}$/);
                var branchTagUpload = match !== undefined;
                var match$1 = Deno.env.get("CI_COMMIT_REF_NAME");
                var latestTagUpload = (match$1 == null) || match$1 !== "master" ? false : true;
                var script = Array$Std.concat(Array$Std.concat([
                          "docker login --username " + param[0] + " --password " + param[1] + " " + registry,
                          "docker build " + folder + " --file " + Path.join(folder, file) + " --tag " + dockerTag + ":" + version,
                          "docker push " + dockerTag + ":" + version
                        ], branchTagUpload ? [
                            "docker tag " + dockerTag + ":" + version + " " + dockerTag + ":$CI_COMMIT_REF_NAME",
                            "docker push " + dockerTag + ":$CI_COMMIT_REF_NAME"
                          ] : []), latestTagUpload ? [
                        "docker tag " + dockerTag + ":" + version + " " + dockerTag + ":latest",
                        "docker push " + dockerTag + ":latest"
                      ] : []);
                return [
                        name + "/" + version,
                        {
                          extends: Jobt.$$default.extends,
                          variables: Jobt.$$default.variables,
                          image: "docker:19.03.12",
                          tags: tags,
                          script: script,
                          needs: needs,
                          services: ["docker:19.03.12-dind"],
                          cache: Jobt.$$default.cache,
                          retry: Jobt.$$default.retry,
                          artifacts: Jobt.$$default.artifacts
                        }
                      ];
              }));
}

function getJobs(ints) {
  return Task$Std.fromResult(Result$Std.seq(Array$Std.flatMap(Array$Std.filter(ints, (function ($$int) {
                            return $$int.mode === "docker";
                          })), (function ($$int) {
                        return Array$Std.map(getInstances($$int), getJob);
                      }))));
}

export {
  getName ,
  getInstances ,
  getJob ,
  getJobs ,
  
}
/* path Not a pure module */
