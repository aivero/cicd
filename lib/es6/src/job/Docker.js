// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jobt from "./Jobt.js";
import * as Path from "path";
import * as Env$Std from "@prefix_re/std/lib/es6/src/Deno/Env.js";
import * as Profile from "../Profile.js";
import * as Path$Std from "@prefix_re/std/lib/es6/src/Deno/Path.js";
import * as Task$Std from "@prefix_re/std/lib/es6/src/Task.js";
import * as Yaml$Std from "@prefix_re/std/lib/es6/src/Deno/Yaml.js";
import * as Array$Std from "@prefix_re/std/lib/es6/src/Array.js";
import * as Tuple$Std from "@prefix_re/std/lib/es6/src/Tuple.js";
import * as Result$Std from "@prefix_re/std/lib/es6/src/Result.js";
import * as String$Std from "@prefix_re/std/lib/es6/src/String.js";
import * as Console$Std from "@prefix_re/std/lib/es6/src/Console.js";

function getName(file, folder) {
  var name = String$Std.split(file, ".")[0];
  if (name !== undefined && name !== "Dockerfile") {
    return name;
  } else {
    return Path.basename(folder);
  }
}

function getInstances(param) {
  var tags = param.tags;
  var afterScript = param.afterScript;
  var beforeScript = param.beforeScript;
  var needs = param.needs;
  var folder = param.folder;
  var version = param.version;
  var name = param.name;
  var file = Yaml$Std.get(param.modeInt, "file");
  var file$1;
  file$1 = typeof file === "number" || file.TAG !== /* String */0 ? undefined : file._0;
  return Array$Std.flatMap(param.profiles, (function (profile) {
                if (file$1 !== undefined) {
                  return [{
                            name: name,
                            version: version,
                            profile: profile,
                            file: file$1,
                            folder: folder,
                            tags: tags,
                            needs: needs,
                            beforeScript: beforeScript,
                            afterScript: afterScript
                          }];
                } else {
                  return Array$Std.map(Array$Std.filter(Path$Std.read(folder), (function (file) {
                                    return String$Std.includes(file.name, "Dockerfile");
                                  })), (function (file) {
                                var name$1 = String$Std.split(file.name, ".")[0];
                                var tmp;
                                tmp = name$1 !== undefined && name$1 !== "Dockerfile" ? name$1 : name;
                                return {
                                        name: tmp,
                                        version: version,
                                        profile: profile,
                                        file: file.name,
                                        folder: folder,
                                        tags: ["gitlab-org-docker"],
                                        needs: needs,
                                        beforeScript: beforeScript,
                                        afterScript: afterScript
                                      };
                              }));
                }
              }));
}

function getJob(param) {
  var afterScript = param.afterScript;
  var beforeScript = param.beforeScript;
  var needs = param.needs;
  var tags = param.tags;
  var folder = param.folder;
  var file = param.file;
  var profile = param.profile;
  var version = param.version;
  var name = param.name;
  Console$Std.log("Found docker instance: " + name + "/" + version + " (" + profile + ")");
  return Result$Std.flatMap(Result$Std.seq4(Tuple$Std.map4([
                      "DOCKER_USER",
                      "DOCKER_PASSWORD",
                      "DOCKER_REGISTRY",
                      "DOCKER_PREFIX"
                    ], Env$Std.getError)), (function (param) {
                var registry = param[2];
                var dockerTag = registry + param[3] + name + "/" + profile;
                var match = String$Std.match(version, /^[0-9a-f]{40}$/);
                var branchTagUpload = match !== undefined ? " --destination " + dockerTag + ":$CI_COMMIT_REF_NAME" : "";
                var match$1 = Deno.env.get("CI_COMMIT_REF_NAME");
                var latestTagUpload = (match$1 == null) ? "" : (
                    match$1 === "master" ? " --destination ${dockerTag}:latest" : ""
                  );
                var tags$1 = Array$Std.empty(tags) ? Result$Std.toOption(Profile.getTags(profile)) : (Console$Std.log("Docker Mode: Tags are set, overriding profile-generated tags"), tags);
                var b64Creds = String$Std.trim(btoa(param[0] + ":" + param[1]));
                return Result$Std.map(Profile.getPlatform(profile), (function (platform) {
                              var script = [
                                "mkdir -p /kaniko/.docker",
                                "echo \\\"{\\\"auths\\\":{\\\"" + registry + "\\\":{\\\"auth\\\":\\\"" + b64Creds + "\\\"}}}\\\" > /kaniko/.docker/config.json",
                                "cat /kaniko/.docker/config.json",
                                "/kaniko/executor --context \\\".\\\" --dockerfile \\\"" + file + "\\\" --customPlatform " + platform + " --destination \\\"" + dockerTag + ":" + version + "\\\" " + branchTagUpload + " " + latestTagUpload + " "
                              ];
                              return [
                                      name + "/" + version,
                                      {
                                        extends: Jobt.$$default.extends,
                                        variables: Jobt.$$default.variables,
                                        image: {
                                          name: "gcr.io/kaniko-project/executor:debug",
                                          entrypoint: [""]
                                        },
                                        tags: tags$1,
                                        before_script: Array$Std.concat(["cd $CI_PROJECT_DIR/" + folder], beforeScript),
                                        script: Array$Std.concat(["cd $CI_PROJECT_DIR/" + folder], script),
                                        after_script: Array$Std.concat(["cd $CI_PROJECT_DIR/" + folder], afterScript),
                                        needs: needs,
                                        services: Jobt.$$default.services,
                                        cache: Jobt.$$default.cache,
                                        retry: Jobt.$$default.retry,
                                        artifacts: Jobt.$$default.artifacts
                                      }
                                    ];
                            }));
              }));
}

function getJobs(ints) {
  return Task$Std.fromResult(Result$Std.seq(Array$Std.flatMap(Array$Std.filter(ints, (function ($$int) {
                            return $$int.mode === "docker";
                          })), (function ($$int) {
                        return Array$Std.map(getInstances($$int), getJob);
                      }))));
}

export {
  getName ,
  getInstances ,
  getJob ,
  getJobs ,
  
}
/* path Not a pure module */
