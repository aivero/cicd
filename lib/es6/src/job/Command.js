// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jobt from "./Jobt.js";
import * as Profile from "../Profile.js";
import * as Task$Std from "@prefix_re/std/lib/es6/src/Task.js";
import * as Array$Std from "@prefix_re/std/lib/es6/src/Array.js";
import * as Result$Std from "@prefix_re/std/lib/es6/src/Result.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Console$Std from "@prefix_re/std/lib/es6/src/Console.js";

function getJobs(ints) {
  return Task$Std.fromResult(Result$Std.seq(Array$Std.flatMap(Array$Std.filter(ints, (function ($$int) {
                            return $$int.mode === "command";
                          })), (function (param) {
                        var cache = param.cache;
                        var image = param.image;
                        var afterScript = param.afterScript;
                        var script = param.script;
                        var beforeScript = param.beforeScript;
                        var needs = param.needs;
                        var folder = param.folder;
                        var version = param.version;
                        var name = param.name;
                        return Array$Std.map(param.profiles, (function (profile) {
                                      return Result$Std.map((Console$Std.log("Found command instance: " + name + "/" + version + " (" + profile + ")"), image !== undefined ? ({
                                                        TAG: /* Ok */0,
                                                        _0: image
                                                      }) : Profile.getImage(profile, Caml_option.nullable_to_opt(Deno.env.get("CONAN_DOCKER_REGISTRY")), Caml_option.nullable_to_opt(Deno.env.get("CONAN_DOCKER_PREFIX")))), (function (image) {
                                                    return [
                                                            name + "/" + version,
                                                            {
                                                              extends: Jobt.$$default.extends,
                                                              variables: Jobt.$$default.variables,
                                                              image: image,
                                                              tags: Jobt.$$default.tags,
                                                              before_script: Array$Std.concat(["cd $CI_PROJECT_DIR/" + folder], beforeScript),
                                                              script: Array$Std.concat(["cd $CI_PROJECT_DIR/" + folder], script),
                                                              after_script: Array$Std.concat(["cd $CI_PROJECT_DIR/" + folder], afterScript),
                                                              needs: Array$Std.uniq(needs),
                                                              services: Jobt.$$default.services,
                                                              cache: cache,
                                                              retry: Jobt.$$default.retry,
                                                              artifacts: Jobt.$$default.artifacts,
                                                              when: Jobt.$$default.when,
                                                              allow_failure: Jobt.$$default.allow_failure
                                                            }
                                                          ];
                                                  }));
                                    }));
                      }))));
}

export {
  getJobs ,
  
}
/* No side effect */
