// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jobt from "./Jobt.js";
import * as Conan from "./Conan.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Docker from "./Docker.js";
import * as Command from "./Command.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Hash$Std from "@prefix_re/std/lib/es6/src/Deno/Hash.js";
import * as Array$Std from "@prefix_re/std/lib/es6/src/Array.js";
import * as Async$Std from "@prefix_re/std/lib/es6/src/Async.js";
import * as Option$Std from "@prefix_re/std/lib/es6/src/Option.js";
import * as Result$Std from "@prefix_re/std/lib/es6/src/Result.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function parseMode(str) {
  switch (str) {
    case "conan" :
        return "conan";
    case "docker" :
        return "docker";
    default:
      return "command";
  }
}

function hashN(__x) {
  return Hash$Std.hashN(__x, 3);
}

function handleDuplicates(jobs) {
  return Array$Std.flatMap(Array$Std.groupBy(jobs, (function (param) {
                    return param[0];
                  })), (function (param) {
                var group = param[1];
                var key = param[0];
                if (group.length === 1) {
                  return [group[0]];
                }
                var jobs = Array$Std.map(group, (function (param) {
                        var job = param[1];
                        return [
                                param[0] + "@" + Hash$Std.hashN(job, 3),
                                job
                              ];
                      }));
                var needs = Array$Std.map(jobs, (function (param) {
                        return param[1].needs;
                      }));
                var firstNeeds = needs[0];
                var allNeedsAreTheSame = Array$Std.reduce(Array$Std.map(needs, (function (needs) {
                            return Caml_obj.caml_equal(Caml_option.some(needs), firstNeeds);
                          })), (function (acc, theSame) {
                        if (acc) {
                          return theSame;
                        } else {
                          return false;
                        }
                      }), true);
                var jobs$1;
                if (allNeedsAreTheSame) {
                  var needsKey = key + "-needs";
                  var needsJob_1 = {
                    extends: Jobt.$$default.extends,
                    variables: Jobt.$$default.variables,
                    image: Jobt.$$default.image,
                    tags: ["x86_64"],
                    before_script: Jobt.$$default.before_script,
                    script: ["echo"],
                    after_script: Jobt.$$default.after_script,
                    needs: Option$Std.flat(firstNeeds),
                    services: Jobt.$$default.services,
                    cache: Jobt.$$default.cache,
                    retry: Jobt.$$default.retry,
                    artifacts: Jobt.$$default.artifacts,
                    when: Jobt.$$default.when,
                    allow_failure: Jobt.$$default.allow_failure
                  };
                  var needsJob = [
                    needsKey,
                    needsJob_1
                  ];
                  jobs$1 = Array$Std.concat(Array$Std.map(jobs, (function (param) {
                              var job = param[1];
                              return [
                                      param[0],
                                      {
                                        extends: job.extends,
                                        variables: job.variables,
                                        image: job.image,
                                        tags: job.tags,
                                        before_script: job.before_script,
                                        script: job.script,
                                        after_script: job.after_script,
                                        needs: [needsKey],
                                        services: job.services,
                                        cache: job.cache,
                                        retry: job.retry,
                                        artifacts: job.artifacts,
                                        when: job.when,
                                        allow_failure: job.allow_failure
                                      }
                                    ];
                            })), [needsJob]);
                } else {
                  jobs$1 = jobs;
                }
                return Array$Std.concat(jobs$1, [[
                              key,
                              {
                                extends: Jobt.$$default.extends,
                                variables: Jobt.$$default.variables,
                                image: Jobt.$$default.image,
                                tags: ["x86_64"],
                                before_script: Jobt.$$default.before_script,
                                script: ["echo"],
                                after_script: Jobt.$$default.after_script,
                                needs: Array$Std.map(jobs$1, (function (param) {
                                        return param[0];
                                      })),
                                services: Jobt.$$default.services,
                                cache: Jobt.$$default.cache,
                                retry: Jobt.$$default.retry,
                                artifacts: Jobt.$$default.artifacts,
                                when: Jobt.$$default.when,
                                allow_failure: Jobt.$$default.allow_failure
                              }
                            ]]);
              }));
}

function load(ints) {
  return Async$Std.map(Promise.all(Array$Std.map([
                      Command.getJobs,
                      Conan.getJobs,
                      Docker.getJobs
                    ], (function (f) {
                        return Curry._1(f, ints);
                      }))), (function (jobs) {
                return Result$Std.map(Result$Std.seq(jobs), (function (jobs) {
                              return handleDuplicates(Array$Std.flat(jobs));
                            }));
              }));
}

var hashLength = 3;

export {
  parseMode ,
  hashLength ,
  hashN ,
  handleDuplicates ,
  load ,
  
}
/* Conan Not a pure module */
