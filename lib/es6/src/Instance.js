// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Path from "./std/Path.js";
import * as Yaml from "./std/Yaml.js";
import * as Path$1 from "path";
import * as $$Array from "./std/Array.js";
import * as Float from "./std/Float.js";
import * as $$String from "./std/String.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function parseMode(str) {
  switch (str) {
    case "conan" :
        return "conan";
    case "docker" :
        return "docker";
    default:
      return "command";
  }
}

function create($$int, folderPath) {
  var name = Yaml.get($$int, "name");
  var name$1;
  name$1 = typeof name === "number" || name.TAG !== /* String */0 ? Path$1.basename(folderPath) : name._0;
  var match = Yaml.get($$int, "version");
  var match$1 = Deno.env.get("CI_COMMIT_SHA");
  var version;
  if (typeof match === "number") {
    version = (match$1 == null) ? "0.0.0" : match$1;
  } else {
    switch (match.TAG | 0) {
      case /* String */0 :
          version = match._0;
          break;
      case /* Number */1 :
          version = Float.toString(match._0);
          break;
      default:
        version = (match$1 == null) ? "0.0.0" : match$1;
    }
  }
  var folder = Yaml.get($$int, "folder");
  var folder$1;
  folder$1 = typeof folder === "number" || folder.TAG !== /* String */0 ? folderPath : Path$1.join(folderPath, folder._0);
  var mode = Yaml.get($$int, "mode");
  var mode$1;
  var exit = 0;
  if (typeof mode === "number" || mode.TAG !== /* String */0) {
    exit = 1;
  } else {
    mode$1 = parseMode(mode._0);
  }
  if (exit === 1) {
    mode$1 = Fs.existsSync(Path$1.join(folder$1, "conanfile.py")) ? "conan" : (
        $$Array.some(Path.read(folder$1), (function (file) {
                return $$String.includes(file.name, "Dockerfile");
              })) ? "docker" : "command"
      );
  }
  var modeInt = mode$1 === "conan" ? Yaml.get($$int, "conan") : (
      mode$1 === "docker" ? Yaml.get($$int, "docker") : /* Null */0
    );
  var commit = Yaml.get($$int, "commit");
  var commit$1;
  commit$1 = typeof commit === "number" || commit.TAG !== /* String */0 ? Caml_option.nullable_to_opt(Deno.env.get("CI_COMMIT_SHA")) : commit._0;
  var branch = Yaml.get($$int, "branch");
  var branch$1;
  branch$1 = typeof branch === "number" || branch.TAG !== /* String */0 ? Caml_option.nullable_to_opt(Deno.env.get("CI_COMMIT_REF_NAME")) : branch._0;
  var reqs = Yaml.get($$int, "reqs");
  var reqs$1;
  if (typeof reqs === "number") {
    reqs$1 = [];
  } else {
    switch (reqs.TAG | 0) {
      case /* String */0 :
          reqs$1 = [reqs._0];
          break;
      case /* Array */3 :
          reqs$1 = $$Array.reduce(reqs._0, (function (reqs, req) {
                  if (typeof req === "number") {
                    return [];
                  } else if (req.TAG === /* String */0) {
                    return $$Array.concat(reqs, [req._0]);
                  } else {
                    return [];
                  }
                }), []);
          break;
      default:
        reqs$1 = [];
    }
  }
  var trigger = Yaml.get($$int, "trigger");
  var trigger$1;
  if (typeof trigger === "number") {
    trigger$1 = [];
  } else {
    switch (trigger.TAG | 0) {
      case /* String */0 :
          trigger$1 = [trigger._0];
          break;
      case /* Array */3 :
          trigger$1 = $$Array.reduce(trigger._0, (function (ints, $$int) {
                  if (typeof $$int === "number") {
                    return [];
                  } else if ($$int.TAG === /* String */0) {
                    return $$Array.concat(ints, [$$int._0]);
                  } else {
                    return [];
                  }
                }), []);
          break;
      default:
        trigger$1 = [];
    }
  }
  var bool = Yaml.get($$int, "bootstrap");
  var bootstrap;
  bootstrap = typeof bool === "number" || bool.TAG !== /* Bool */4 ? false : bool._0;
  var image = Yaml.get($$int, "image");
  var image$1;
  image$1 = typeof image === "number" || image.TAG !== /* String */0 ? undefined : image._0;
  var tags = Yaml.get($$int, "tags");
  var tags$1;
  tags$1 = typeof tags === "number" ? [] : (
      tags.TAG === /* Array */3 ? $$Array.reduce(tags._0, (function (tags, tag) {
                if (typeof tag === "number") {
                  return [];
                } else if (tag.TAG === /* String */0) {
                  return $$Array.concat(tags, [tag._0]);
                } else {
                  return [];
                }
              }), []) : []
    );
  var profiles = Yaml.get($$int, "profiles");
  var profiles$1;
  profiles$1 = typeof profiles === "number" ? [
      "linux-x86_64",
      "linux-armv8"
    ] : (
      profiles.TAG === /* Array */3 ? $$Array.reduce(profiles._0, (function (array, profile) {
                if (typeof profile === "number" || profile.TAG !== /* String */0) {
                  return array;
                } else {
                  return $$Array.concat(array, [profile._0]);
                }
              }), []) : [
          "linux-x86_64",
          "linux-armv8"
        ]
    );
  var cmds = Yaml.get($$int, "before_script");
  var beforeScript;
  if (typeof cmds === "number") {
    beforeScript = [];
  } else {
    switch (cmds.TAG | 0) {
      case /* String */0 :
          beforeScript = [cmds._0];
          break;
      case /* Array */3 :
          beforeScript = $$Array.reduce(cmds._0, (function (cmds, cmd) {
                  if (typeof cmd === "number") {
                    return [];
                  } else if (cmd.TAG === /* String */0) {
                    return $$Array.concat(cmds, [cmd._0]);
                  } else {
                    return [];
                  }
                }), []);
          break;
      default:
        beforeScript = [];
    }
  }
  var cmds$1 = Yaml.get($$int, "script");
  var script;
  if (typeof cmds$1 === "number") {
    script = [];
  } else {
    switch (cmds$1.TAG | 0) {
      case /* String */0 :
          script = [cmds$1._0];
          break;
      case /* Array */3 :
          script = $$Array.reduce(cmds$1._0, (function (cmds, cmd) {
                  if (typeof cmd === "number") {
                    return [];
                  } else if (cmd.TAG === /* String */0) {
                    return $$Array.concat(cmds, [cmd._0]);
                  } else {
                    return [];
                  }
                }), []);
          break;
      default:
        script = [];
    }
  }
  var cmds$2 = Yaml.get($$int, "after_script");
  var afterScript;
  if (typeof cmds$2 === "number") {
    afterScript = [];
  } else {
    switch (cmds$2.TAG | 0) {
      case /* String */0 :
          afterScript = [cmds$2._0];
          break;
      case /* Array */3 :
          afterScript = $$Array.reduce(cmds$2._0, (function (cmds, cmd) {
                  if (typeof cmd === "number") {
                    return [];
                  } else if (cmd.TAG === /* String */0) {
                    return $$Array.concat(cmds, [cmd._0]);
                  } else {
                    return [];
                  }
                }), []);
          break;
      default:
        afterScript = [];
    }
  }
  var paths = Yaml.get(Yaml.get($$int, "cache"), "paths");
  var cache;
  if (typeof paths === "number" || paths.TAG !== /* Array */3) {
    cache = undefined;
  } else {
    var paths$1 = $$Array.reduce(paths._0, (function (paths, path) {
            if (typeof path === "number") {
              return [];
            } else if (path.TAG === /* String */0) {
              return $$Array.concat(paths, [path._0]);
            } else {
              return [];
            }
          }), []);
    cache = {
      paths: paths$1
    };
  }
  return {
          name: name$1,
          version: version,
          folder: folder$1,
          mode: mode$1,
          modeInt: modeInt,
          commit: commit$1,
          branch: branch$1,
          needs: reqs$1,
          trigger: trigger$1,
          bootstrap: bootstrap,
          profiles: profiles$1,
          beforeScript: beforeScript,
          script: script,
          afterScript: afterScript,
          image: image$1,
          tags: tags$1,
          cache: cache
        };
}

export {
  parseMode ,
  create ,
  
}
/* fs Not a pure module */
