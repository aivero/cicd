// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "./std/List.js";
import * as $$Option from "./std/Option.js";
import * as $$String from "./std/String.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function getImage(profile, image) {
  var registry = Deno.env.get("DOCKER_REGISTRY");
  var prefix = Deno.env.get("DOCKER_PREFIX");
  var triple = List.fromArray($$String.split(profile, "-"));
  var os;
  if (triple) {
    var exit = 0;
    var match = triple.tl;
    if (match && match.hd === "musl") {
      os = "alpine";
    } else {
      exit = 1;
    }
    if (exit === 1) {
      switch (triple.hd) {
        case "macos" :
            os = "macos";
            break;
        case "linux" :
        case "wasi" :
            os = Caml_option.nullable_to_opt(Deno.env.get("DOCKER_DISTRO"));
            break;
        case "windows" :
            os = "windows";
            break;
        default:
          os = undefined;
      }
    }
    
  } else {
    os = undefined;
  }
  var arch;
  if (triple) {
    var match$1 = triple.tl;
    if (match$1) {
      switch (match$1.hd) {
        case "armv8" :
            arch = "armv8";
            break;
        case "wasm" :
        case "x86_64" :
            arch = "x86_64";
            break;
        default:
          arch = undefined;
      }
    } else {
      arch = undefined;
    }
  } else {
    arch = undefined;
  }
  if (image !== undefined) {
    return image;
  } else {
    return $$Option.map($$Option.seq4([
                    (registry == null) ? undefined : Caml_option.some(registry),
                    (prefix == null) ? undefined : Caml_option.some(prefix),
                    os,
                    arch
                  ]), (function (param) {
                  return param[0] + param[1] + param[2] + "-" + param[3];
                }));
  }
}

export {
  getImage ,
  
}
/* No side effect */
