// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env$Std from "@prefix_re/std/lib/es6/src/Deno/Env.js";
import * as List$Std from "@prefix_re/std/lib/es6/src/List.js";
import * as Result$Std from "@prefix_re/std/lib/es6/src/Result.js";
import * as String$Std from "@prefix_re/std/lib/es6/src/String.js";

function getImage(profile) {
  var registry = Env$Std.getError("DOCKER_REGISTRY");
  var prefix = Env$Std.getError("DOCKER_PREFIX");
  var triple = List$Std.fromArray(String$Std.split(profile, "-"));
  var os;
  if (triple) {
    var exit = 0;
    var match = triple.tl;
    if (match && match.hd === "musl") {
      os = {
        TAG: /* Ok */0,
        _0: "alpine"
      };
    } else {
      exit = 1;
    }
    if (exit === 1) {
      switch (triple.hd) {
        case "macos" :
            os = {
              TAG: /* Ok */0,
              _0: "macos"
            };
            break;
        case "linux" :
        case "wasi" :
            os = Env$Std.getError("DOCKER_DISTRO");
            break;
        case "windows" :
            os = {
              TAG: /* Ok */0,
              _0: "windows"
            };
            break;
        default:
          os = {
            TAG: /* Error */1,
            _0: "profile: os in " + profile + " not supported"
          };
      }
    }
    
  } else {
    os = {
      TAG: /* Error */1,
      _0: "profile: os in " + profile + " not supported"
    };
  }
  var arch;
  var exit$1 = 0;
  if (triple) {
    var match$1 = triple.tl;
    if (match$1) {
      switch (match$1.hd) {
        case "armv8" :
            arch = {
              TAG: /* Ok */0,
              _0: "armv8"
            };
            break;
        case "wasm" :
        case "x86_64" :
            arch = {
              TAG: /* Ok */0,
              _0: "x86_64"
            };
            break;
        default:
          exit$1 = 1;
      }
    } else {
      exit$1 = 1;
    }
  } else {
    exit$1 = 1;
  }
  if (exit$1 === 1) {
    arch = {
      TAG: /* Error */1,
      _0: "profile: arch in " + profile + " not supported"
    };
  }
  return Result$Std.map(Result$Std.seq4([
                  registry,
                  prefix,
                  os,
                  arch
                ]), (function (param) {
                return param[0] + param[1] + param[2] + "-" + param[3];
              }));
}

function getTags(profile) {
  var triple = List$Std.fromArray(String$Std.split(profile, "-"));
  var arch;
  var exit = 0;
  if (triple) {
    var match = triple.tl;
    if (match) {
      switch (match.hd) {
        case "armv8" :
            arch = {
              TAG: /* Ok */0,
              _0: "armv8"
            };
            break;
        case "wasm" :
        case "x86_64" :
            arch = {
              TAG: /* Ok */0,
              _0: "x86_64"
            };
            break;
        default:
          exit = 1;
      }
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    arch = {
      TAG: /* Error */1,
      _0: "profile: arch in " + profile + " not supported"
    };
  }
  return Result$Std.map(arch, (function (arch) {
                return [
                        arch,
                        "aws"
                      ];
              }));
}

var $$default = "linux-x86_64";

export {
  $$default ,
  $$default as default,
  getImage ,
  getTags ,
  
}
/* No side effect */
