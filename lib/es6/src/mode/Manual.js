// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Task$Std from "@prefix_re/std/lib/es6/src/Task.js";
import * as Array$Std from "@prefix_re/std/lib/es6/src/Array.js";
import * as String$Std from "@prefix_re/std/lib/es6/src/String.js";
import * as Console$Std from "@prefix_re/std/lib/es6/src/Console.js";

function filter(ints, comps) {
  return Array$Std.filter(ints, (function (param) {
                var version = param.version;
                var name = param.name;
                if (Array$Std.some(comps, (function (comp) {
                          var match = comp[0];
                          var match$1 = comp[1];
                          if (match === undefined) {
                            return false;
                          }
                          if (match === "*" && match$1 !== undefined) {
                            return match$1 === "*" ? true : match$1 === version;
                          }
                          return match$1 !== undefined && match$1 !== "*" ? false : match === name;
                        }))) {
                  return !Array$Std.some(comps, (function (comp) {
                                var cname = comp[0];
                                if (cname !== undefined && String$Std.startsWith(cname, "-")) {
                                  return String$Std.sliceToEnd(cname, 1) === name;
                                } else {
                                  return false;
                                }
                              }));
                } else {
                  return false;
                }
              }));
}

function findInts(allInts) {
  Console$Std.log("Manual Mode: Create instances from manual args");
  var comps = Deno.env.get("component");
  var comps$1 = (comps == null) ? [] : (Console$Std.log("Building components: " + comps), Array$Std.map(String$Std.split(comps, ","), (function (comp) {
              return String$Std.split(comp, "/");
            })));
  return Task$Std.map(allInts, (function (ints) {
                return filter(ints, comps$1);
              }));
}

export {
  filter ,
  findInts ,
  
}
/* No side effect */
