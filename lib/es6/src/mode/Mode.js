// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Git from "./Git.js";
import * as Job from "../job/Job.js";
import * as Proc from "../std/Proc.js";
import * as Task from "../std/Task.js";
import * as $$Array from "../std/Array.js";
import * as Config from "../Config.js";
import * as Manual from "./Manual.js";
import * as Result from "../std/Result.js";
import * as $$String from "../std/String.js";

function findAllInts(recursive) {
  var cmd = $$Array.concat([
        "git",
        "ls-files",
        "**devops.yml"
      ], recursive ? ["--recurse-submodules"] : []);
  return Task.flatMap(Proc.run(cmd), (function (e) {
                return Task.fromResult(Result.map(Result.seq($$Array.map($$String.split($$String.trim(e), "\n"), Config.loadFile)), $$Array.flatten));
              }));
}

function findReqs($$int, allInts) {
  return $$Array.flatMap(allInts, (function (aint) {
                if (!($$Array.includes($$int.needs, aint.name) || $$Array.includes($$int.trigger, aint.name))) {
                  return [];
                }
                var reqs = findReqs(aint, allInts);
                if ($$Array.some(reqs, (function (req) {
                          return $$Array.includes(req.needs, aint.name) ? true : $$Array.includes(req.trigger, aint.name);
                        }))) {
                  return reqs;
                } else {
                  return $$Array.concat([aint], reqs);
                }
              }));
}

function addReqs(ints, allInts) {
  return Task.flatMap(Task.seq2([
                  ints,
                  allInts
                ]), (function (param) {
                var allInts = param[1];
                var ints = param[0];
                var reqs = $$Array.flatMap(ints, (function (__x) {
                        return findReqs(__x, allInts);
                      }));
                var ints$1 = $$Array.concat($$Array.filter(reqs, (function (req) {
                            return !$$Array.some(ints, (function ($$int) {
                                          return $$int.name === req.name;
                                        }));
                          })), ints);
                return Task.to($$Array.map(ints$1, (function (triggered) {
                                  var triggers = $$Array.map($$Array.filter(ints$1, (function ($$int) {
                                              return $$Array.includes($$int.trigger, triggered.name);
                                            })), (function (trigger) {
                                          return trigger.name + "/" + trigger.version;
                                        }));
                                  return {
                                          name: triggered.name,
                                          version: triggered.version,
                                          folder: triggered.folder,
                                          mode: triggered.mode,
                                          modeInt: triggered.modeInt,
                                          commit: triggered.commit,
                                          branch: triggered.branch,
                                          needs: $$Array.concat(triggered.needs, triggers),
                                          trigger: triggered.trigger,
                                          bootstrap: triggered.bootstrap,
                                          profiles: triggered.profiles,
                                          beforeScript: triggered.beforeScript,
                                          script: triggered.script,
                                          afterScript: triggered.afterScript,
                                          image: triggered.image,
                                          tags: triggered.tags
                                        };
                                })));
              }));
}

function load(param) {
  var kind = Deno.env.get("mode");
  var recursive = Deno.env.get("recursive");
  var source = Deno.env.get("CI_PIPELINE_SOURCE");
  var recursive$1;
  if (recursive == null) {
    recursive$1 = true;
  } else {
    switch (recursive) {
      case "0" :
      case "false" :
          recursive$1 = false;
          break;
      case "1" :
      case "true" :
          recursive$1 = true;
          break;
      default:
        recursive$1 = true;
    }
  }
  var allInts = findAllInts(recursive$1);
  var ints;
  if (kind == null) {
    ints = (source == null) || source !== "web" ? Git.findInts(undefined) : Manual.findInts(allInts);
  } else {
    switch (kind) {
      case "git" :
          ints = Git.findInts(undefined);
          break;
      case "manual" :
          ints = Manual.findInts(allInts);
          break;
      default:
        ints = Task.toError("Mode not supported: " + kind);
    }
  }
  var ints$1 = addReqs(ints, allInts);
  return Task.flatMap(ints$1, Job.load);
}

export {
  findAllInts ,
  findReqs ,
  addReqs ,
  load ,
  
}
/* Git Not a pure module */
