// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import Hash from "hash";
import * as Path from "path";
import * as Config from "../Config.js";
import * as Env$Std from "@prefix_re/std/lib/es6/src/Deno/Env.js";
import * as Bool$Std from "@prefix_re/std/lib/es6/src/Bool.js";
import * as Instance from "../Instance.js";
import * as Proc$Std from "@prefix_re/std/lib/es6/src/Deno/Proc.js";
import * as Task$Std from "@prefix_re/std/lib/es6/src/Task.js";
import * as Array$Std from "@prefix_re/std/lib/es6/src/Array.js";
import * as Tuple$Std from "@prefix_re/std/lib/es6/src/Tuple.js";
import * as Result$Std from "@prefix_re/std/lib/es6/src/Result.js";
import * as String$Std from "@prefix_re/std/lib/es6/src/String.js";
import * as Console$Std from "@prefix_re/std/lib/es6/src/Console.js";

function getCurBranch(param) {
  return Env$Std.getError("CI_COMMIT_REF_NAME");
}

function getDefaultBranch(param) {
  return Env$Std.getError("CI_DEFAULT_BRANCH");
}

function getParentBranch(param) {
  var match = Env$Std.getError("CI_TARGET_BRANCH_NAME");
  var match$1 = Env$Std.getError("CI_DEFAULT_BRANCH");
  if (match.TAG === /* Ok */0) {
    var branch = match._0;
    if (branch === "" && match$1.TAG === /* Ok */0) {
      return match$1._0;
    } else {
      return branch;
    }
  }
  if (match$1.TAG !== /* Ok */0) {
    return "master";
  }
  var branch$1 = match$1._0;
  if (branch$1 === "") {
    return "master";
  } else {
    return branch$1;
  }
}

function getLastRev(param) {
  var match = Env$Std.getError("CI_COMMIT_REF_NAME");
  var match$1 = Env$Std.getError("CI_COMMIT_BEFORE_SHA");
  if (match.TAG !== /* Ok */0) {
    return Task$Std.toError("Couldn't find last rev");
  }
  if (match._0 === "master" && match$1.TAG === /* Ok */0) {
    var commit = match$1._0;
    if (commit === "0000000000000000000000000000000000000000") {
      return Task$Std.to([
                  "master",
                  "HEAD^"
                ]);
    } else {
      return Task$Std.to([
                  "master",
                  commit
                ]);
    }
  }
  var parent_branch = getParentBranch(undefined);
  return Task$Std.to([
              parent_branch,
              parent_branch
            ]);
}

function cmpInts(intsNew, intsOld) {
  var hashsOld = Array$Std.map(intsOld, (function (prim) {
          return Hash(prim);
        }));
  return Array$Std.filter(intsNew, (function (intNew) {
                return !Array$Std.includes(hashsOld, Hash(intNew));
              }));
}

function handleConfigChange(confPath) {
  Console$Std.log("Config changed: " + confPath);
  var intsNew = Task$Std.map(Proc$Std.run([
            "git",
            "show",
            "HEAD:" + confPath
          ]), (function (__x) {
          return Config.load(__x, confPath);
        }));
  var lastRev = getLastRev(undefined);
  var intsOld = Task$Std.flatMap(Task$Std.flatMap(lastRev, (function (param) {
              var lastRev = param[1];
              return Task$Std.seq2([
                          Proc$Std.run([
                                "git",
                                "ls-tree",
                                "-r",
                                lastRev
                              ]),
                          Task$Std.to(lastRev)
                        ]);
            })), (function (param) {
          if (String$Std.includes(param[0], "\t" + confPath)) {
            return Task$Std.map(Proc$Std.run([
                            "git",
                            "show",
                            param[1] + ":" + confPath
                          ]), (function (__x) {
                          return Config.load(__x, confPath);
                        }));
          } else {
            return Task$Std.to([]);
          }
        }));
  return Task$Std.flatMap(Task$Std.seq2([
                  intsNew,
                  intsOld
                ]), (function (param) {
                return Task$Std.to(cmpInts(param[0], param[1]));
              }));
}

function handleFileChange(confPath, filePath) {
  Console$Std.log("File changed: " + filePath);
  return Task$Std.fromResult(Result$Std.map(Config.loadFile(confPath), (function (__x) {
                    return Array$Std.filter(__x, (function (param) {
                                  var folder = param.folder;
                                  var match = String$Std.startsWith(Path.dirname(filePath), folder);
                                  Console$Std.log(folder + ": " + Bool$Std.toString(match));
                                  return match;
                                }));
                  })));
}

function handleChange(file) {
  var conf = Config.find(Path.dirname(file));
  if (conf !== undefined) {
    if (Path.basename(file) === Config.name) {
      return [handleConfigChange(conf)];
    } else {
      return [handleFileChange(conf, file)];
    }
  } else {
    return [];
  }
}

function findInts(param) {
  Console$Std.log("Git Mode: Create instances from changed files in git");
  return Task$Std.flatMap(Task$Std.flatMap(Task$Std.flatMap(Task$Std.flatMap(Task$Std.fromResult(Result$Std.seq2(Tuple$Std.map2([
                                      "CI_COMMIT_REF_NAME",
                                      "CI_COMMIT_SHA"
                                    ], Env$Std.getError))), (function (param) {
                            return Proc$Std.run([
                                        "git",
                                        "checkout",
                                        "-B",
                                        param[0],
                                        param[1]
                                      ]);
                          })), (function (param) {
                        return getLastRev(undefined);
                      })), (function (param) {
                    var commit = param[1];
                    Console$Std.log("Last branch: " + param[0]);
                    Console$Std.log("Last commit: " + commit);
                    return Proc$Std.run([
                                "git",
                                "diff",
                                "--name-only",
                                commit,
                                "HEAD"
                              ]);
                  })), (function (output) {
                return Task$Std.map(Task$Std.seq(Array$Std.flatMap(Array$Std.filter(String$Std.split(String$Std.trim(output), "\n"), (function (prim) {
                                          return Fs.existsSync(prim);
                                        })), handleChange)), (function (confs) {
                              var ints = Array$Std.flat(confs);
                              return Array$Std.reduce(ints, (function (param, $$int) {
                                              var ints = param[1];
                                              var intsHash = param[0];
                                              var newHash = Hash($$int);
                                              if (Array$Std.some(intsHash, (function (oldHash) {
                                                        return oldHash === newHash;
                                                      }))) {
                                                return [
                                                        intsHash,
                                                        ints
                                                      ];
                                              } else {
                                                Console$Std.log("Found instance: " + $$int.name + "/" + $$int.version + " (mode: " + Instance.modeToString($$int.mode) + ") (" + newHash + ")");
                                                return [
                                                        Array$Std.concat(intsHash, [newHash]),
                                                        Array$Std.concat(ints, [$$int])
                                                      ];
                                              }
                                            }), [
                                            [],
                                            []
                                          ])[1];
                            }));
              }));
}

export {
  getCurBranch ,
  getDefaultBranch ,
  getParentBranch ,
  getLastRev ,
  cmpInts ,
  handleConfigChange ,
  handleFileChange ,
  handleChange ,
  findInts ,
  
}
/* fs Not a pure module */
