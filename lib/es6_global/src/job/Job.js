// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Flat from "../std/Flat.js";
import * as Task from "../std/Task.js";
import * as Path from "path";
import * as Conan from "./Conan.js";
import * as Command from "./Command.js";
import * as Belt_Array from "../../../../node_modules/rescript/lib/es6/belt_Array.js";
import * as Belt_Result from "../../../../node_modules/rescript/lib/es6/belt_Result.js";

function parseMode(str) {
  switch (str) {
    case "conan" :
        return "conan";
    case "conan-install-script" :
        return "conan-install-script";
    case "conan-install-tarball" :
        return "conan-install-tarball";
    case "docker" :
        return "docker";
    default:
      return "command";
  }
}

function getMode($$int) {
  var match = $$int.mode;
  var match$1 = $$int.folder;
  if (match !== undefined) {
    return parseMode(match);
  } else if (match$1 !== undefined) {
    if (Fs.existsSync(Path.join(match$1, "conanfile.py"))) {
      return "conan";
    } else if (Fs.existsSync(Path.join(match$1, "Dockerfile"))) {
      return "docker";
    } else {
      return "command";
    }
  } else {
    return "command";
  }
}

function load(ints) {
  return Belt_Result.map(ints, (function (ints) {
                return Task.map(Promise.all([
                                Command.getJobs(ints),
                                Conan.getJobs(ints)
                              ]), (function (jobs) {
                              return Belt_Result.map(Flat.array(jobs), Belt_Array.concatMany);
                            }));
              }));
}

export {
  parseMode ,
  getMode ,
  load ,
  
}
/* fs Not a pure module */
