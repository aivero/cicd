// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../std/Env.js";
import * as Path from "../std/Path.js";
import * as Task from "../std/Task.js";
import * as Yaml from "../std/Yaml.js";
import * as Path$1 from "path";
import * as $$Array from "../std/Array.js";
import * as Tuple from "../std/Tuple.js";
import * as Result from "../std/Result.js";
import * as $$String from "../std/String.js";

function getName(file, folder) {
  var name = $$String.split(file, ".")[0];
  if (name !== undefined && name !== "Dockerfile") {
    return name;
  } else {
    return Path$1.basename(folder);
  }
}

function getInstances(param) {
  var reqs = param.reqs;
  var folder = param.folder;
  var file = Yaml.get(param.modeInt, "file");
  var file$1;
  file$1 = typeof file === "number" || file.TAG !== /* String */0 ? undefined : file._0;
  if (file$1 !== undefined) {
    return [{
              name: param.name,
              file: file$1,
              folder: folder,
              tags: param.tags,
              reqs: reqs
            }];
  } else {
    return $$Array.map($$Array.filter(Path.read(folder), (function (file) {
                      return $$String.includes(file.name, "Dockerfile");
                    })), (function (file) {
                  return {
                          name: getName(file.name, folder),
                          file: file.name,
                          folder: folder,
                          tags: ["gitlab-org-docker"],
                          reqs: reqs
                        };
                }));
  }
}

function getJob(param) {
  var reqs = param.reqs;
  var tags = param.tags;
  var folder = param.folder;
  var file = param.file;
  var name = param.name;
  return Result.map(Result.seq4(Tuple.map4([
                      "DOCKER_USER",
                      "DOCKER_PASSWORD",
                      "DOCKER_REGISTRY",
                      "DOCKER_PREFIX"
                    ], Env.getError)), (function (param) {
                var registry = param[2];
                var dockerTag = registry + param[3] + name;
                var script = [
                  "docker login --username " + param[0] + " --password " + param[1] + " " + registry,
                  "docker build " + folder + " --file " + Path$1.join(folder, file) + " --tag " + dockerTag,
                  "docker push " + dockerTag
                ];
                return {
                        name: name,
                        extends: undefined,
                        variables: undefined,
                        image: "docker:19.03.12",
                        tags: tags,
                        script: script,
                        needs: reqs,
                        services: ["docker:19.03.12-dind"]
                      };
              }));
}

function getJobs(ints) {
  return Task.resolve(Result.seq($$Array.map($$Array.flatMap(ints, getInstances), getJob)));
}

export {
  getName ,
  getInstances ,
  getJob ,
  getJobs ,
  
}
/* Yaml Not a pure module */
