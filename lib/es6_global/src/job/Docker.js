// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../std/Env.js";
import * as Path from "../std/Path.js";
import * as Task from "../std/Task.js";
import * as Yaml from "../std/Yaml.js";
import * as Path$1 from "path";
import * as $$Array from "../std/Array.js";
import * as Tuple from "../std/Tuple.js";
import * as Result from "../std/Result.js";
import * as $$String from "../std/String.js";

function getName(file, folder) {
  var name = $$String.split(file, ".")[0];
  if (name !== undefined && name !== "Dockerfile") {
    return name;
  } else {
    return Path$1.basename(folder);
  }
}

function getInstances(param) {
  var needs = param.needs;
  var folder = param.folder;
  var version = param.version;
  var name = param.name;
  var file = Yaml.get(param.modeInt, "file");
  var file$1;
  file$1 = typeof file === "number" || file.TAG !== /* String */0 ? undefined : file._0;
  if (file$1 !== undefined) {
    return [{
              name: name,
              version: version,
              file: file$1,
              folder: folder,
              tags: param.tags,
              needs: needs
            }];
  } else {
    return $$Array.map($$Array.filter(Path.read(folder), (function (file) {
                      return $$String.includes(file.name, "Dockerfile");
                    })), (function (file) {
                  var name$1 = $$String.split(file.name, ".")[0];
                  var tmp;
                  tmp = name$1 !== undefined ? (
                      name$1 === "Dockerfile" ? name + "-dockerfile" : name$1 + "-dockerfile"
                    ) : name + "-dockerfile";
                  return {
                          name: tmp,
                          version: version,
                          file: file.name,
                          folder: folder,
                          tags: ["gitlab-org-docker"],
                          needs: needs
                        };
                }));
  }
}

function getJob(param) {
  var needs = param.needs;
  var tags = param.tags;
  var folder = param.folder;
  var file = param.file;
  var version = param.version;
  var name = param.name;
  return Result.map(Result.seq4(Tuple.map4([
                      "DOCKER_USER",
                      "DOCKER_PASSWORD",
                      "DOCKER_REGISTRY",
                      "DOCKER_PREFIX"
                    ], Env.getError)), (function (param) {
                var registry = param[2];
                var dockerTag = registry + param[3] + name;
                var match = $$String.match(version, /^[0-9a-f]{40}$/);
                var branchTagUpload = match !== undefined;
                var script = $$Array.concat([
                      "docker login --username " + param[0] + " --password " + param[1] + " " + registry,
                      "docker build " + folder + " --file " + Path$1.join(folder, file) + " --tag " + dockerTag,
                      "docker push " + dockerTag + ":" + version
                    ], branchTagUpload ? ["docker push " + dockerTag + ":$CI_COMMIT_REF_NAME"] : []);
                return {
                        name: name + "/" + version,
                        extends: undefined,
                        variables: undefined,
                        image: "docker:19.03.12",
                        tags: tags,
                        script: script,
                        needs: needs,
                        services: ["docker:19.03.12-dind"]
                      };
              }));
}

function getJobs(ints) {
  return Task.resolve(Result.seq($$Array.flatMap($$Array.filter(ints, (function ($$int) {
                            return $$int.mode === "docker";
                          })), (function ($$int) {
                        var ints = getInstances($$int);
                        return $$Array.concat($$Array.map(ints, getJob), [{
                                      TAG: /* Ok */0,
                                      _0: {
                                        name: $$int.name + "/" + $$int.version,
                                        extends: undefined,
                                        variables: undefined,
                                        image: undefined,
                                        tags: undefined,
                                        script: ["echo"],
                                        needs: $$Array.map(ints, (function ($$int) {
                                                return $$int.name + "/" + $$int.version;
                                              })),
                                        services: undefined
                                      }
                                    }]);
                      }))));
}

export {
  getName ,
  getInstances ,
  getJob ,
  getJobs ,
  
}
/* Yaml Not a pure module */
