// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Seq from "../std/Seq.js";
import * as Flat from "../std/Flat.js";
import * as Path from "../std/Path.js";
import * as Task from "../std/Task.js";
import * as Yaml from "../std/Yaml.js";
import * as Path$1 from "path";
import * as Belt_Array from "../../../../node_modules/rescript/lib/es6/belt_Array.js";
import * as Belt_Result from "../../../../node_modules/rescript/lib/es6/belt_Result.js";
import * as Caml_option from "../../../../node_modules/rescript/lib/es6/caml_option.js";

function getName(file, folder) {
  var name = Belt_Array.get(file.split("."), 0);
  if (name !== undefined && name !== "Dockerfile") {
    return name;
  } else {
    return Path$1.basename(folder);
  }
}

function getInstances(param) {
  var reqs = param.reqs;
  var folder = param.folder;
  var file = Yaml.get(param.modeInt, "file");
  var file$1;
  file$1 = typeof file === "number" || file.TAG !== /* String */0 ? undefined : file._0;
  if (file$1 !== undefined) {
    return [{
              name: param.name,
              file: file$1,
              folder: folder,
              reqs: reqs
            }];
  } else {
    return Belt_Array.map(Path.read(folder).filter(function (file) {
                    return file.name.includes("Dockerfile");
                  }), (function (file) {
                  return {
                          name: getName(file.name, folder),
                          file: file.name,
                          folder: folder,
                          reqs: reqs
                        };
                }));
  }
}

function getJob(param) {
  var reqs = param.reqs;
  var folder = param.folder;
  var file = param.file;
  var name = param.name;
  var env = Seq.option3([
        Caml_option.nullable_to_opt(Deno.env.get("DOCKER_USER")),
        Caml_option.nullable_to_opt(Deno.env.get("DOCKER_PASSWORD")),
        Caml_option.nullable_to_opt(Deno.env.get("DOCKER_PREFIX"))
      ]);
  return Belt_Result.map(env !== undefined ? ({
                  TAG: /* Ok */0,
                  _0: env
                }) : ({
                  TAG: /* Error */1,
                  _0: "Docker: Username, password or prefix not provided!"
                }), (function (param) {
                var dockerTag = param[2] + name;
                var script = [
                  "docker login --username " + param[0] + " --password " + param[1],
                  "docker build --file " + Path$1.join(folder, file) + " --tag " + dockerTag,
                  "docker push " + dockerTag
                ];
                return {
                        name: name,
                        extends: undefined,
                        variables: undefined,
                        image: "docker:19.03.12",
                        tags: undefined,
                        script: script,
                        needs: reqs,
                        services: ["docker:19.03.12-dind"]
                      };
              }));
}

function getJobs(ints) {
  var ints$1 = Flat.array(Belt_Array.map(ints, getInstances));
  return Task.resolve(Seq.result(Belt_Array.map(ints$1, getJob)));
}

export {
  getName ,
  getInstances ,
  getJob ,
  getJobs ,
  
}
/* Yaml Not a pure module */
