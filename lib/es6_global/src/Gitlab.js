// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$File from "./std/File.js";
import * as Curry from "../../../node_modules/rescript/lib/es6/curry.js";
import * as Belt_Array from "../../../node_modules/rescript/lib/es6/belt_Array.js";
import * as Belt_Range from "../../../node_modules/rescript/lib/es6/belt_Range.js";

function chunk(array, size) {
  var cur = Belt_Array.slice(array, 0, size);
  var rest = Belt_Array.slice(array, size, array.length - size | 0);
  var match = rest.length;
  if (match !== 0) {
    return Belt_Array.concat([cur], chunk(rest, size));
  } else {
    return [cur];
  }
}

function generateJob(job) {
  var image = job.image;
  var script = job.script;
  return Belt_Array.concatMany([
              [
                job.name + ":",
                "  needs: [" + Belt_Array.joinWith(job.needs, ", ", (function (a) {
                        return a;
                      })) + "]"
              ],
              image !== undefined ? ["  image: " + image] : [],
              script !== undefined ? Belt_Array.concat(["  script:"], Belt_Array.map(script, (function (l) {
                            return "    - " + l;
                          }))) : []
            ]);
}

function generate(jobs) {
  var partial_arg = new TextEncoder();
  var encode = function (param) {
    return partial_arg.encode(param);
  };
  var jobs$1 = jobs.length !== 0 ? jobs : [{
        name: "empty",
        image: undefined,
        script: ["echo"],
        needs: []
      }];
  var chunks = Belt_Array.map(chunk(jobs$1, 100), (function (chunk) {
          return Belt_Array.map(chunk, generateJob);
        }));
  Belt_Range.forEach(0, 10, (function (i) {
          var name = "generated-config-" + String(Math.imul(i, 100)) + ".yml";
          return $$File.write(Curry._1(encode, ""), name);
        }));
  var includeLines = Belt_Array.mapWithIndex(chunks, (function (i, chunk) {
          var name = "generated-config-" + String(Math.imul(i, 100)) + ".yml";
          $$File.write(Curry._1(encode, Belt_Array.joinWith(Belt_Array.concatMany(chunk), "\n", (function (a) {
                          return a;
                        }))), name);
          return "- '" + name + "'";
        }));
  return $$File.write(Curry._1(encode, Belt_Array.joinWith(Belt_Array.concat(["include:"], includeLines), "\n", (function (a) {
                        return a;
                      }))), "generated-config.yml");
}

export {
  chunk ,
  generateJob ,
  generate ,
  
}
/* File Not a pure module */
