// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Dict from "./std/Dict.js";
import * as $$File from "./std/File.js";
import * as $$Array from "./std/Array.js";
import * as Curry from "../../../node_modules/rescript/lib/es6/curry.js";
import * as Caml_option from "../../../node_modules/rescript/lib/es6/caml_option.js";

function chunk(array, size) {
  var cur = $$Array.slice(array, 0, size);
  var rest = $$Array.slice(array, size, $$Array.length(array) - size | 0);
  var match = $$Array.length(rest);
  if (match !== 0) {
    return $$Array.concat([cur], chunk(rest, size));
  } else {
    return [cur];
  }
}

function generateJob(job) {
  var image = job.image;
  var $$extends = job.extends;
  var tags = job.tags;
  var services = job.services;
  var vars = job.variables;
  var script = job.script;
  return $$Array.flatten([
              [
                job.name + ":",
                "  needs: [" + $$Array.join(job.needs, ", ") + "]"
              ],
              image !== undefined ? ["  image: " + image] : [],
              $$extends !== undefined ? ["  extends: [" + $$Array.join($$extends, ", ") + "]"] : [],
              tags !== undefined ? ["  tags: [" + $$Array.join(tags, ", ") + "]"] : [],
              services !== undefined ? ["  services: [\"" + $$Array.join(services, "\", \"") + "\"]"] : [],
              vars !== undefined ? $$Array.concat(["  variables:"], $$Array.map(Dict.entries(Caml_option.valFromOption(vars)), (function (param) {
                            return "    " + param[0] + ": \"" + param[1] + "\"";
                          }))) : [],
              script !== undefined ? $$Array.concat(["  script:"], $$Array.map(script, (function (l) {
                            return "    - " + l;
                          }))) : []
            ]);
}

var base = "\n.conan:\n  variables:\n    CONAN_USER_HOME: \"$CI_PROJECT_DIR\"\n    CONAN_DATA_PATH: \"$CI_PROJECT_DIR/conan_data\"\n    GIT_SUBMODULE_STRATEGY: recursive\n  script:\n    - conan config install $CONAN_CONFIG_URL -sf $CONAN_CONFIG_DIR\n    - conan config set general.default_profile=$PROFILE\n    - conan config set storage.path=$CONAN_DATA_PATH\n    - conan user $CONAN_LOGIN_USERNAME -p $CONAN_LOGIN_PASSWORD -r $CONAN_REPO_ALL\n    - conan user $CONAN_LOGIN_USERNAME -p $CONAN_LOGIN_PASSWORD -r $CONAN_REPO_INTERNAL\n    - conan user $CONAN_LOGIN_USERNAME -p $CONAN_LOGIN_PASSWORD -r $CONAN_REPO_PUBLIC\n    - conan create $FOLDER $NAME/$VERSION@ $ARGS\n    - conan upload $NAME/$VERSION@ --all -c -r $REPO\n    - \"[[ -n $UPLOAD_ALIAS ]] && conan upload $NAME/$CI_COMMIT_REF_NAME@ --all -c -r $REPO || echo\"\n  retry:\n    max: 2\n    when:\n      - runner_system_failure\n      - stuck_or_timeout_failure\n  artifacts:\n    expire_in: 1 month\n    paths:\n      - \"conan_data/$NAME/$VERSION/_/_/build/*/meson-logs/*-log.txt\"\n      - \"conan_data/$NAME/$VERSION/_/_/build/*/*/meson-logs/*-log.txt\"\n      - \"conan_data/$NAME/$VERSION/_/_/build/*/CMakeFiles/CMake*.log\"\n      - \"conan_data/$NAME/$VERSION/_/_/build/*/*/CMakeFiles/CMake*.log\"\n      - \"conan_data/$NAME/$VERSION/_/_/build/*/*/config.log\"\n    when: always\n.conan-x86_64:\n  extends: .conan\n  tags: [x86_64,aws]\n  image: aivero/conan:focal-x86_64\n.conan-armv8:\n  extends: .conan\n  tags: [armv8,aws]\n  image: aivero/conan:focal-armv8\n.conan-x86_64-bootstrap:\n  extends: .conan-x86_64\n  image: aivero/conan:focal-x86_64-bootstrap\n.conan-armv8-bootstrap:\n  extends: .conan-armv8\n  image: aivero/conan:focal-armv8-bootstrap\n";

function generate(jobs) {
  var partial_arg = new TextEncoder();
  var encode = function (param) {
    return partial_arg.encode(param);
  };
  var jobs$1 = $$Array.empty(jobs) ? [{
        name: "empty",
        extends: undefined,
        variables: undefined,
        image: undefined,
        tags: ["x86_64"],
        script: ["echo"],
        needs: [],
        services: undefined
      }] : jobs;
  return $$File.write(Curry._1(encode, base + $$Array.join($$Array.flatMap(jobs$1, generateJob), "\n")), "generated-config.yml");
}

export {
  chunk ,
  generateJob ,
  base ,
  generate ,
  
}
/* File Not a pure module */
