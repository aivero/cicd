// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$File from "./std/File.js";
import * as Curry from "../../../node_modules/rescript/lib/es6/curry.js";
import * as Js_dict from "../../../node_modules/rescript/lib/es6/js_dict.js";
import * as Belt_Array from "../../../node_modules/rescript/lib/es6/belt_Array.js";
import * as Caml_option from "../../../node_modules/rescript/lib/es6/caml_option.js";

function chunk(array, size) {
  var cur = Belt_Array.slice(array, 0, size);
  var rest = Belt_Array.slice(array, size, array.length - size | 0);
  var match = rest.length;
  if (match !== 0) {
    return Belt_Array.concat([cur], chunk(rest, size));
  } else {
    return [cur];
  }
}

function generateJob(job) {
  var image = job.image;
  var $$extends = job.extends;
  var tags = job.tags;
  var vars = job.variables;
  var script = job.script;
  return Belt_Array.concatMany([
              [
                job.name + ":",
                "  needs: [" + Belt_Array.joinWith(job.needs, ", ", (function (a) {
                        return a;
                      })) + "]"
              ],
              image !== undefined ? ["  image: " + image] : [],
              $$extends !== undefined ? ["  extends: " + $$extends] : [],
              tags !== undefined ? ["  tags: [" + Belt_Array.joinWith(tags, ", ", (function (a) {
                          return a;
                        })) + "]"] : [],
              vars !== undefined ? Belt_Array.concat(["  variables:"], Belt_Array.map(Js_dict.entries(Caml_option.valFromOption(vars)), (function (param) {
                            return "    " + param[0] + ": " + param[1];
                          }))) : [],
              script !== undefined ? Belt_Array.concat(["  script:"], Belt_Array.map(script, (function (l) {
                            return "    - " + l;
                          }))) : []
            ]);
}

var base = "\n.conan:\n  variables:\n    CONAN_USER_HOME: \"$CI_PROJECT_DIR\"\n    CONAN_DATA_PATH: \"$CI_PROJECT_DIR/conan_data\"\n  script:\n    - conan config install $CONAN_CONFIG_URL -sf $CONAN_CONFIG_DIR\n    - conan config set general.default_profile=$PROFILE\n    - conan config set storage.path=$CONAN_DATA_PATH\n    - conan user $CONAN_LOGIN_USERNAME -p $CONAN_LOGIN_PASSWORD -r $CONAN_REPO_ALL\n    - conan user $CONAN_LOGIN_USERNAME -p $CONAN_LOGIN_PASSWORD -r $CONAN_REPO_INTERNAL\n    - conan user $CONAN_LOGIN_USERNAME -p $CONAN_LOGIN_PASSWORD -r $CONAN_REPO_PUBLIC\n    - conan create $FOLDER $PKG@ $ARGS\n    - conan upload $PKG@ --all -c -r $REPO\n  retry:\n    max: 2\n    when:\n      - runner_system_failure\n      - stuck_or_timeout_failure\n  artifacts:\n    expire_in: 1 month\n    paths:\n      - \"conan_data/$PKG/_/_/build/*/meson-logs/*-log.txt\"\n      - \"conan_data/$PKG/_/_/build/*/*/meson-logs/*-log.txt\"\n      - \"conan_data/$PKG/_/_/build/*/CMakeFiles/CMake*.log\"\n      - \"conan_data/$PKG/_/_/build/*/*/CMakeFiles/CMake*.log\"\n      - \"conan_data/$PKG/_/_/build/*/*/config.log\"\n    when: always\n.conan-x86_64:\n  extends: .conan\n  tags: [x86_64]\n  image: aivero/conan:focal-x86_64\n.conan-armv8:\n  extends: .conan\n  tags: [armv8]\n  image: aivero/conan:focal-armv8\n.conan-x86_64-bootstrap:\n  extends: .conan-x86_64\n  image: aivero/conan:focal-x86_64-bootstrap\n.conan-armv8-bootstrap:\n  extends: .conan-armv8\n  image: aivero/conan:focal-armv8-bootstrap\n";

function generate(jobs) {
  var partial_arg = new TextEncoder();
  var encode = function (param) {
    return partial_arg.encode(param);
  };
  var jobs$1 = jobs.length !== 0 ? jobs : [{
        name: "empty",
        extends: undefined,
        variables: undefined,
        image: undefined,
        tags: ["x86_64"],
        script: ["echo"],
        needs: []
      }];
  return $$File.write(Curry._1(encode, base + Belt_Array.joinWith(Belt_Array.concatMany(Belt_Array.map(jobs$1, generateJob)), "\n", (function (a) {
                        return a;
                      }))), "generated-config.yml");
}

export {
  chunk ,
  generateJob ,
  base ,
  generate ,
  
}
/* File Not a pure module */
