// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Dict from "./Dict.js";
import * as $$Array from "./Array.js";

function classify(value) {
  var match = Object.prototype.toString.call(value);
  switch (match) {
    case "[object Array]" :
        return {
                TAG: /* Array */3,
                _0: $$Array.map(value, classify)
              };
    case "[object Boolean]" :
        return {
                TAG: /* Bool */4,
                _0: value
              };
    case "[object Number]" :
        return {
                TAG: /* Number */1,
                _0: value
              };
    case "[object String]" :
        return {
                TAG: /* String */0,
                _0: value
              };
    case "[object Null]" :
    case "[object Undefined]" :
        return /* Null */0;
    default:
      return {
              TAG: /* Object */2,
              _0: Dict.fromArray($$Array.map(Dict.entries(value), (function (param) {
                          return [
                                  param[0],
                                  classify(param[1])
                                ];
                        })))
            };
  }
}

function get(json, key) {
  if (typeof json === "number") {
    return /* Null */0;
  }
  if (json.TAG !== /* Object */2) {
    return /* Null */0;
  }
  var val = Dict.get(json._0, key);
  if (val !== undefined) {
    return val;
  } else {
    return /* Null */0;
  }
}

function map(json, f) {
  if (typeof json === "number") {
    return [];
  } else if (json.TAG === /* Array */3) {
    return $$Array.map(json._0, f);
  } else {
    return [];
  }
}

function parse(string) {
  return classify(JSON.parse(string));
}

export {
  classify ,
  get ,
  map ,
  parse ,
  
}
/* No side effect */
