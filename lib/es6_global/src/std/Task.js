// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Flat from "./Flat.js";
import * as Curry from "../../../../node_modules/rescript/lib/es6/curry.js";
import * as Belt_Array from "../../../../node_modules/rescript/lib/es6/belt_Array.js";
import * as Pervasives from "../../../../node_modules/rescript/lib/es6/pervasives.js";

function resolve(prim) {
  return Promise.resolve(prim);
}

function reject(prim) {
  return Promise.reject(prim);
}

function $$catch(a, fn) {
  return a.catch(Curry.__1(fn));
}

function flatCatch(a, fn) {
  return a.catch(function (e) {
              return Promise.resolve(Curry._1(fn, e));
            });
}

function catchExit(a) {
  return a.catch(function (e) {
              console.log("Rejected: " + e.toString());
              return Pervasives.exit(1);
            });
}

function map(a, fn) {
  return a.then(function (v) {
              return Promise.resolve(Curry._1(fn, v));
            });
}

function flatMap(a, fn) {
  return a.then(Curry.__1(fn));
}

function sleep(a, ms) {
  return a.then(function (res) {
              return new Promise((function (resolve) {
                            setTimeout((function (param) {
                                    return Curry._1(resolve, res);
                                  }), ms);
                            
                          }));
            });
}

function pool(tasks, count) {
  var curTasks = Promise.all(Belt_Array.map(Belt_Array.slice(tasks, 0, count), (function (f) {
              return new Promise((function (resolve) {
                            return Curry._1(resolve, Curry._1(f, undefined));
                          }));
            })));
  var rest = Belt_Array.slice(tasks, count, tasks.length - count | 0);
  console.log("pool: " + String(rest.length));
  var match = rest.length;
  if (match !== 0) {
    return curTasks.then(function (res1) {
                return map(pool(rest, count), (function (res2) {
                              return Flat.array([
                                          res1,
                                          res2
                                        ]);
                            }));
              });
  } else {
    return curTasks;
  }
}

export {
  resolve ,
  reject ,
  $$catch ,
  flatCatch ,
  catchExit ,
  map ,
  flatMap ,
  sleep ,
  pool ,
  
}
/* No side effect */
