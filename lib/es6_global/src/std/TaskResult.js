// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Flat from "./Flat.js";
import * as Task from "./Task.js";
import * as Curry from "../../../../node_modules/rescript/lib/es6/curry.js";
import * as Belt_Array from "../../../../node_modules/rescript/lib/es6/belt_Array.js";
import * as Belt_Result from "../../../../node_modules/rescript/lib/es6/belt_Result.js";

function resolve(prim) {
  return Promise.resolve(prim);
}

function map(a, fn) {
  return Task.map(a, (function (res) {
                return Belt_Result.map(res, fn);
              }));
}

function flatMap(a, fn) {
  return Task.map(a, (function (res) {
                return Belt_Result.flatMap(res, fn);
              }));
}

function pool(tasks, count) {
  var curTasks = Promise.all(Belt_Array.map(Belt_Array.slice(tasks, 0, count), (function (f) {
              return new Promise((function (resolve) {
                            return Curry._1(resolve, Curry._1(f, undefined));
                          }));
            })));
  var rest = Belt_Array.slice(tasks, count, tasks.length - count | 0);
  console.log("pool: " + String(rest.length));
  return Flat.task(Task.flatMap(curTasks, (function (res1) {
                    var tasks = Task.map(Promise.all(res1), Flat.array);
                    return map(tasks, (function (res1) {
                                  var match = rest.length;
                                  if (match !== 0) {
                                    return Task.map(pool(rest, count), (function (res2) {
                                                  return Belt_Result.map(res2, (function (res2) {
                                                                return Belt_Array.concatMany([
                                                                            res1,
                                                                            res2
                                                                          ]);
                                                              }));
                                                }));
                                  } else {
                                    return Task.resolve({
                                                TAG: /* Ok */0,
                                                _0: res1
                                              });
                                  }
                                }));
                  })));
}

export {
  resolve ,
  map ,
  flatMap ,
  pool ,
  
}
/* No side effect */
