// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Env from "../std/Env.js";
import * as Int from "../std/Int.js";
import * as Proc from "../std/Proc.js";
import * as Task from "../std/Task.js";
import Hash from "hash";
import * as Path from "path";
import * as $$Array from "../std/Array.js";
import * as Config from "../Config.js";
import * as $$Option from "../std/Option.js";
import * as Result from "../std/Result.js";
import * as $$String from "../std/String.js";
import * as Console from "../std/Console.js";
import * as TaskResult from "../std/TaskResult.js";

function getCurBranch(param) {
  return Env.getError("CI_COMMIT_REF_NAME");
}

function getMergeBase(curBranch, branch) {
  return TaskResult.flatMap(TaskResult.map(Proc.run([
                      "git",
                      "merge-base",
                      curBranch,
                      branch
                    ]), $$String.trim), (function (mergeBase) {
                return TaskResult.map(TaskResult.flatMap(Proc.run([
                                    "git",
                                    "rev-list",
                                    "--count",
                                    curBranch + "..." + mergeBase
                                  ]), (function (output) {
                                  return Task.resolve($$Option.toResult(Int.fromString($$String.trim(output)), "Couldn't convert to int"));
                                })), (function (countMergeBase) {
                              return [
                                      countMergeBase,
                                      branch,
                                      mergeBase
                                    ];
                            }));
              }));
}

function getParentBranch(param) {
  var curBranch = Task.resolve(Env.getError("CI_COMMIT_REF_NAME"));
  return TaskResult.map(TaskResult.flatMap(TaskResult.seq2([
                      curBranch,
                      Proc.run([
                            "git",
                            "branch",
                            "-a"
                          ])
                    ]), (function (param) {
                    var curBranch = param[0];
                    var branches = $$Array.filter($$Array.map($$String.split($$String.trim(param[1]), "\n"), $$String.trim), (function (branch) {
                            return !($$String.startsWith(branch, "*") || $$String.endsWith(branch, "/" + curBranch));
                          }));
                    return TaskResult.flatMap(TaskResult.seq($$Array.map(branches, (function (param) {
                                          return getMergeBase(curBranch, param);
                                        }))), (function (mergeBases) {
                                  return Task.resolve($$Option.toResult($$Array.sort(mergeBases, (function (param, param$1) {
                                                          return param[0] - param$1[0] | 0;
                                                        }))[0], "No merge bases"));
                                }));
                  })), (function (param) {
                return [
                        param[1],
                        param[2]
                      ];
              }));
}

function getLastRev(param) {
  var val = Deno.env.get("CI_COMMIT_BEFORE_SHA");
  if (val == null) {
    return TaskResult.resolve("HEAD^");
  } else if (val === "0000000000000000000000000000000000000000") {
    return TaskResult.map(getParentBranch(undefined), (function (param) {
                  return param[1];
                }));
  } else {
    return TaskResult.resolve(val);
  }
}

function cmpInts(intsNew, intsOld) {
  var hashsOld = $$Array.map(intsOld, (function (prim) {
          return Hash(prim);
        }));
  return $$Array.filter(intsNew, (function (intNew) {
                return !$$Array.includes(hashsOld, Hash(intNew));
              }));
}

function handleConfigChange(confPath) {
  var intsNew = TaskResult.map(Proc.run([
            "git",
            "show",
            "HEAD:" + confPath
          ]), (function (__x) {
          return Config.load(__x, confPath);
        }));
  var lastRev = getLastRev(undefined);
  var intsOld = TaskResult.flatMap(lastRev, (function (lastRev) {
          return TaskResult.map(Proc.run([
                          "git",
                          "show",
                          lastRev + ":" + confPath
                        ]), (function (conf) {
                        return Config.load(conf, confPath);
                      }));
        }));
  var lastRev$1 = getLastRev(undefined);
  var filesOld = TaskResult.flatMap(lastRev$1, (function (lastRev) {
          return Proc.run([
                      "git",
                      "ls-tree",
                      "-r",
                      lastRev
                    ]);
        }));
  return TaskResult.flatMap(TaskResult.seq3([
                  intsNew,
                  intsOld,
                  filesOld
                ]), (function (param) {
                return TaskResult.resolve($$String.includes(param[2], confPath) ? cmpInts(param[0], param[1]) : []);
              }));
}

function handleFileChange(confPath, filePath) {
  return Task.resolve(Result.map(Config.loadFile(confPath), (function (__x) {
                    return $$Array.filter(__x, (function (param) {
                                  return $$String.endsWith(param.folder, Path.dirname(filePath));
                                }));
                  })));
}

function handleChange(file) {
  var conf = Config.find(Path.dirname(file));
  if (conf !== undefined) {
    if (Path.basename(file) === Config.name) {
      return [handleConfigChange(conf)];
    } else {
      return [handleFileChange(conf, file)];
    }
  } else {
    return [];
  }
}

function findInts(param) {
  Console.log("Git Mode: Create instances from changed files in git");
  var lastRev = getLastRev(undefined);
  return TaskResult.flatMap(TaskResult.flatMap(lastRev, (function (lastRev) {
                    Console.log("Last revision: " + lastRev);
                    return Proc.run([
                                "git",
                                "diff",
                                "--name-only",
                                lastRev,
                                "HEAD"
                              ]);
                  })), (function (output) {
                return TaskResult.map(TaskResult.seq($$Array.flatMap($$Array.filter($$String.split($$String.trim(output), "\n"), (function (prim) {
                                          return Fs.existsSync(prim);
                                        })), handleChange)), (function (confs) {
                              var ints = $$Array.flatten(confs);
                              return $$Array.reduce(ints, (function (param, $$int) {
                                              var ints = param[1];
                                              var intsHash = param[0];
                                              var newHash = Hash($$int);
                                              if ($$Array.some(intsHash, (function (oldHash) {
                                                        return oldHash === newHash;
                                                      }))) {
                                                return [
                                                        intsHash,
                                                        ints
                                                      ];
                                              } else {
                                                return [
                                                        $$Array.concat(intsHash, [newHash]),
                                                        $$Array.concat(ints, [$$int])
                                                      ];
                                              }
                                            }), [
                                            [],
                                            []
                                          ])[1];
                            }));
              }));
}

export {
  getCurBranch ,
  getMergeBase ,
  getParentBranch ,
  getLastRev ,
  cmpInts ,
  handleConfigChange ,
  handleFileChange ,
  handleChange ,
  findInts ,
  
}
/* fs Not a pure module */
