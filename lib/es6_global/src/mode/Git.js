// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Seq from "../std/Seq.js";
import * as Flat from "../std/Flat.js";
import * as Proc from "../std/Proc.js";
import * as Task from "../std/Task.js";
import Hash from "hash";
import * as Path from "path";
import * as Config from "../Config.js";
import * as Belt_Array from "../../../../node_modules/rescript/lib/es6/belt_Array.js";
import * as TaskResult from "../std/TaskResult.js";
import * as Belt_Result from "../../../../node_modules/rescript/lib/es6/belt_Result.js";
import * as Caml_option from "../../../../node_modules/rescript/lib/es6/caml_option.js";

function getLastRev(param) {
  var val = Deno.env.get("CI_COMMIT_BEFORE_SHA");
  if (val == null) {
    return Task.resolve("HEAD^");
  }
  if (val !== "0000000000000000000000000000000000000000") {
    return Task.resolve(val);
  }
  var match = Seq.option2(Caml_option.nullable_to_opt(Deno.env.get("CI_COMMIT_REF_NAME")), Caml_option.nullable_to_opt(Deno.env.get("CI_DEFAULT_BRANCH")));
  if (match !== undefined) {
    return Task.map(Proc.run([
                    "git",
                    "merge-base",
                    match[0],
                    match[1]
                  ]), (function (branch_base) {
                  if (branch_base.TAG === /* Ok */0) {
                    return branch_base._0;
                  } else {
                    return "^HEAD";
                  }
                }));
  } else {
    return Task.resolve("HEAD^");
  }
}

function cmpInts(intsNew, intsOld) {
  var hashsOld = Belt_Array.map(intsOld, (function (prim) {
          return Hash(prim);
        }));
  return intsNew.filter(function (intNew) {
              return !hashsOld.includes(Hash(intNew));
            });
}

function handleConfigChange(confPath) {
  var intsNew = TaskResult.flatMap(Proc.run([
            "git",
            "show",
            "HEAD:" + confPath
          ]), (function (conf) {
          return Seq.result(Config.load(conf, confPath));
        }));
  var lastRev = getLastRev(undefined);
  var intsOld = Task.flatMap(lastRev, (function (lastRev) {
          return TaskResult.flatMap(Proc.run([
                          "git",
                          "show",
                          lastRev + ":" + confPath
                        ]), (function (conf) {
                        return Seq.result(Config.load(conf, confPath));
                      }));
        }));
  var lastRev$1 = getLastRev(undefined);
  var filesOld = Task.flatMap(lastRev$1, (function (lastRev) {
          return Proc.run([
                      "git",
                      "ls-tree",
                      "-r",
                      lastRev
                    ]);
        }));
  return Task.map(Promise.all([
                  intsNew,
                  intsOld,
                  filesOld
                ]), (function (param) {
                var filesOld = param[2];
                var intsOld = param[1];
                var intsNew = param[0];
                if (intsNew.TAG === /* Ok */0) {
                  if (intsOld.TAG === /* Ok */0) {
                    if (filesOld.TAG === /* Ok */0) {
                      if (filesOld._0.includes(confPath)) {
                        return {
                                TAG: /* Ok */0,
                                _0: cmpInts(intsNew._0, intsOld._0)
                              };
                      } else {
                        return {
                                TAG: /* Ok */0,
                                _0: []
                              };
                      }
                    } else {
                      return {
                              TAG: /* Ok */0,
                              _0: []
                            };
                    }
                  } else {
                    return {
                            TAG: /* Ok */0,
                            _0: []
                          };
                  }
                } else {
                  return {
                          TAG: /* Error */1,
                          _0: intsNew._0
                        };
                }
              }));
}

function handleFileChange(confPath, filePath) {
  var ints = Config.loadFile(confPath);
  var tmp;
  tmp = ints.TAG === /* Ok */0 ? ({
        TAG: /* Ok */0,
        _0: ints._0.filter(function (param) {
              var folder = param.folder;
              return (
                        folder !== undefined ? folder : ""
                      ).endsWith(Path.dirname(filePath));
            })
      }) : ({
        TAG: /* Error */1,
        _0: ints._0
      });
  return Task.resolve(tmp);
}

function handleChange(file) {
  var conf = Config.find(Path.dirname(file));
  if (conf !== undefined) {
    if (Path.basename(file) === Config.name) {
      return [handleConfigChange(conf)];
    } else {
      return [handleFileChange(conf, file)];
    }
  } else {
    return [];
  }
}

function findInts(param) {
  console.log("Git Mode: Create instances from changed files in git");
  var lastRev = getLastRev(undefined);
  return TaskResult.flatten(TaskResult.map(Task.flatMap(lastRev, (function (lastRev) {
                        return Proc.run([
                                    "git",
                                    "diff",
                                    "--name-only",
                                    lastRev,
                                    "HEAD"
                                  ]);
                      })), (function (output) {
                    return Task.map(Promise.all(output.trim().split("\n").filter(function (prim) {
                                          return Fs.existsSync(prim);
                                        }).reduce((function (a, file) {
                                          return Belt_Array.concat(a, handleChange(file));
                                        }), [])), (function (tasks) {
                                  return Belt_Result.map(Seq.result(tasks), (function (confs) {
                                                var ints = Flat.array(confs);
                                                return ints.reduce((function (param, $$int) {
                                                                var ints = param[1];
                                                                var intsHash = param[0];
                                                                var newHash = Hash($$int);
                                                                if (intsHash.some(function (oldHash) {
                                                                        return oldHash === newHash;
                                                                      })) {
                                                                  return [
                                                                          intsHash,
                                                                          ints
                                                                        ];
                                                                } else {
                                                                  return [
                                                                          intsHash.concat([newHash]),
                                                                          ints.concat([$$int])
                                                                        ];
                                                                }
                                                              }), [
                                                              [],
                                                              []
                                                            ])[1];
                                              }));
                                }));
                  })));
}

export {
  getLastRev ,
  cmpInts ,
  handleConfigChange ,
  handleFileChange ,
  handleChange ,
  findInts ,
  
}
/* fs Not a pure module */
