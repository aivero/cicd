// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Git from "./Git.js";
import * as Job from "../job/Job.js";
import * as Flat from "../std/Flat.js";
import * as Proc from "../std/Proc.js";
import * as Task from "../std/Task.js";
import * as Config from "../Config.js";
import * as Manual from "./Manual.js";
import * as Instance from "../Instance.js";
import * as Belt_Array from "../../../../node_modules/rescript/lib/es6/belt_Array.js";
import * as TaskResult from "../std/TaskResult.js";
import * as Belt_Result from "../../../../node_modules/rescript/lib/es6/belt_Result.js";

function findReqs(ints) {
  var allInts = TaskResult.flatMap(Proc.run([
            "git",
            "ls-files",
            "**devops.yml",
            "--recurse-submodules"
          ]), (function (e) {
          return Belt_Result.map(Flat.array(Belt_Array.map(e.trim().split("\n"), Config.loadFile)), Belt_Array.concatMany);
        }));
  return Task.map(Promise.all([
                  ints,
                  allInts
                ]), (function (param) {
                var allInts = param[1];
                var ints = param[0];
                if (ints.TAG !== /* Ok */0) {
                  return {
                          TAG: /* Error */1,
                          _0: ints._0
                        };
                }
                var ints$1 = ints._0;
                if (allInts.TAG !== /* Ok */0) {
                  return {
                          TAG: /* Error */1,
                          _0: allInts._0
                        };
                }
                var reqs = Belt_Array.concatMany(Belt_Array.map(ints$1, (function ($$int) {
                            var req = $$int.req;
                            if (req !== undefined) {
                              return req;
                            } else {
                              return [];
                            }
                          })));
                var reqs$1 = allInts._0.filter(function ($$int) {
                      var name = $$int.name;
                      if (name !== undefined ? reqs.includes(name) : false) {
                        return !Belt_Array.some(ints$1, (function ($$int) {
                                      var name = $$int.name;
                                      if (name !== undefined) {
                                        return reqs.includes(name);
                                      } else {
                                        return false;
                                      }
                                    }));
                      } else {
                        return false;
                      }
                    });
                return {
                        TAG: /* Ok */0,
                        _0: Belt_Array.concat(ints$1, reqs$1)
                      };
              }));
}

function load(param) {
  var kind = Deno.env.get("mode");
  var manual = Deno.env.get("CI_JOB_MANUAL");
  var ints;
  if (kind == null) {
    ints = (manual == null) ? Task.resolve({
            TAG: /* Error */1,
            _0: "Mode not set"
          }) : Manual.findInts(undefined);
  } else {
    switch (kind) {
      case "git" :
          ints = Git.findInts(undefined);
          break;
      case "manual" :
          ints = Manual.findInts(undefined);
          break;
      default:
        ints = Task.resolve({
              TAG: /* Error */1,
              _0: "Mode not supported: " + kind
            });
    }
  }
  var ints$1 = findReqs(ints);
  return Flat.task(TaskResult.flatMap(ints$1, (function (ints) {
                    return Job.load(Instance.zip(ints));
                  })));
}

export {
  findReqs ,
  load ,
  
}
/* Git Not a pure module */
