// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Git from "./Git.js";
import * as Job from "../job/Job.js";
import * as Proc from "../std/Proc.js";
import * as Task from "../std/Task.js";
import * as $$Array from "../std/Array.js";
import * as Config from "../Config.js";
import * as Manual from "./Manual.js";
import * as Result from "../std/Result.js";
import * as $$String from "../std/String.js";
import * as TaskResult from "../std/TaskResult.js";

function findAllInts(recursive) {
  var cmd = $$Array.concat([
        "git",
        "ls-files",
        "**devops.yml"
      ], recursive ? ["--recurse-submodules"] : []);
  return TaskResult.flatMap(Proc.run(cmd), (function (e) {
                return Task.resolve(Result.map(Result.seq($$Array.map($$String.split($$String.trim(e), "\n"), Config.loadFile)), $$Array.flatten));
              }));
}

function findReqs(ints, allInts) {
  return TaskResult.flatMap(TaskResult.seq2([
                  ints,
                  allInts
                ]), (function (param) {
                var ints = param[0];
                var reqs = $$Array.flatMap(ints, (function ($$int) {
                        return $$int.reqs;
                      }));
                var reqs$1 = $$Array.filter(param[1], (function ($$int) {
                        if ($$Array.includes(reqs, $$int.name)) {
                          return !$$Array.some(ints, (function ($$int) {
                                        return $$Array.includes(reqs, $$int.name);
                                      }));
                        } else {
                          return false;
                        }
                      }));
                return Task.resolve({
                            TAG: /* Ok */0,
                            _0: $$Array.concat(ints, reqs$1)
                          });
              }));
}

function load(param) {
  var kind = Deno.env.get("mode");
  var recursive = Deno.env.get("recursive");
  var source = Deno.env.get("CI_PIPELINE_SOURCE");
  var recursive$1;
  if (recursive == null) {
    recursive$1 = true;
  } else {
    switch (recursive) {
      case "0" :
      case "false" :
          recursive$1 = false;
          break;
      case "1" :
      case "true" :
          recursive$1 = true;
          break;
      default:
        recursive$1 = true;
    }
  }
  var allInts = findAllInts(recursive$1);
  var ints;
  if (kind == null) {
    ints = (source == null) || source !== "web" ? Git.findInts(undefined) : Manual.findInts(allInts);
  } else {
    switch (kind) {
      case "git" :
          ints = Git.findInts(undefined);
          break;
      case "manual" :
          ints = Manual.findInts(allInts);
          break;
      default:
        ints = Task.resolve({
              TAG: /* Error */1,
              _0: "Mode not supported: " + kind
            });
    }
  }
  var ints$1 = findReqs(ints, allInts);
  return TaskResult.flatMap(ints$1, Job.load);
}

export {
  findAllInts ,
  findReqs ,
  load ,
  
}
/* Git Not a pure module */
