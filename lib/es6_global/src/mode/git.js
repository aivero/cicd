// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Flat from "../std/flat.js";
import * as Proc from "../std/proc.js";
import * as Task from "../std/task.js";
import Hash from "hash";
import * as Path from "path";
import * as Config from "../config.js";
import * as Belt_Array from "../../../../node_modules/rescript/lib/es6/belt_Array.js";
import * as Belt_Result from "../../../../node_modules/rescript/lib/es6/belt_Result.js";

var val = Deno.env.get("CI_COMMIT_BEFORE_SHA");

var lastRev = (val == null) ? "HEAD^" : val;

function cmpInts(intsNew, intsOld) {
  var hashsOld = Belt_Array.map(intsOld, (function (prim) {
          return Hash(prim);
        }));
  return intsNew.filter(function (intNew) {
              return !hashsOld.includes(Hash(intNew));
            });
}

function handleConfigChange(confPath) {
  var intsNew = Task.map(Proc.run([
            "git",
            "show",
            "HEAD:" + confPath
          ]), (function (conf) {
          if (conf.TAG === /* Ok */0) {
            return Flat.array(Config.load(conf._0, confPath));
          } else {
            return {
                    TAG: /* Error */1,
                    _0: conf._0
                  };
          }
        }));
  var intsOld = Task.map(Proc.run([
            "git",
            "show",
            lastRev + ":" + confPath
          ]), (function (conf) {
          if (conf.TAG === /* Ok */0) {
            return Flat.array(Config.load(conf._0, confPath));
          } else {
            return {
                    TAG: /* Error */1,
                    _0: conf._0
                  };
          }
        }));
  var filesOld = Proc.run([
        "git",
        "ls-tree",
        "-r",
        lastRev
      ]);
  return Task.map(Promise.all([
                  intsNew,
                  intsOld,
                  filesOld
                ]), (function (param) {
                var filesOld = param[2];
                var intsOld = param[1];
                var intsNew = param[0];
                if (intsNew.TAG === /* Ok */0) {
                  if (intsOld.TAG === /* Ok */0) {
                    if (filesOld.TAG === /* Ok */0) {
                      if (filesOld._0.includes(confPath)) {
                        return {
                                TAG: /* Ok */0,
                                _0: cmpInts(intsNew._0, intsOld._0)
                              };
                      } else {
                        return {
                                TAG: /* Ok */0,
                                _0: []
                              };
                      }
                    } else {
                      return {
                              TAG: /* Ok */0,
                              _0: []
                            };
                    }
                  } else {
                    return {
                            TAG: /* Ok */0,
                            _0: []
                          };
                  }
                } else {
                  return {
                          TAG: /* Error */1,
                          _0: intsNew._0
                        };
                }
              }));
}

function handleFileChange(confPath, filePath) {
  var ints = Config.loadFile(confPath);
  var tmp;
  tmp = ints.TAG === /* Ok */0 ? ({
        TAG: /* Ok */0,
        _0: ints._0.filter(function (param) {
              var folder = param.folder;
              return (
                        folder !== undefined ? folder : ""
                      ).endsWith(Path.dirname(filePath));
            })
      }) : ({
        TAG: /* Error */1,
        _0: ints._0
      });
  return Task.resolve(tmp);
}

function handleChange(file) {
  var conf = Config.find(Path.dirname(file));
  if (conf !== undefined) {
    if (Path.basename(conf) === Config.name) {
      return [handleConfigChange(conf)];
    } else {
      return [handleFileChange(conf, file)];
    }
  } else {
    return [];
  }
}

function findInts(param) {
  console.log("Git Mode: Create instances from changed files in git");
  return Task.flatMap(Proc.run([
                  "git",
                  "diff",
                  "--name-only",
                  lastRev,
                  "HEAD"
                ]), (function (output) {
                return Task.map(Promise.all(Belt_Result.getExn(output).trim().split("\n").filter(function (prim) {
                                      return Fs.existsSync(prim);
                                    }).reduce((function (a, file) {
                                      return Belt_Array.concat(a, handleChange(file));
                                    }), [])), (function (tasks) {
                              return Belt_Result.map(Flat.array(tasks), Belt_Array.concatMany);
                            }));
              }));
}

export {
  lastRev ,
  cmpInts ,
  handleConfigChange ,
  handleFileChange ,
  handleChange ,
  findInts ,
  
}
/* val Not a pure module */
