// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Git from "./git.js";
import * as Job from "../job/job.js";
import * as Flat from "../std/flat.js";
import * as Proc from "../std/proc.js";
import * as Task from "../std/task.js";
import * as Config from "../config.js";
import * as Manual from "./manual.js";
import * as Instance from "../instance.js";
import * as Belt_Array from "../../../../node_modules/rescript/lib/es6/belt_Array.js";
import * as Belt_Result from "../../../../node_modules/rescript/lib/es6/belt_Result.js";

function findNeeds(ints) {
  var allInts = Task.map(Proc.run([
            "git",
            "ls-files",
            "**devops.yml",
            "--recurse-submodules"
          ]), (function (e) {
          return Belt_Result.map(Flat.array(Belt_Array.map(Belt_Result.getExn(e).trim().split("\n"), Config.loadFile)), Belt_Array.concatMany);
        }));
  return Task.map(Promise.all([
                  ints,
                  allInts
                ]), (function (param) {
                var ints = param[0];
                return Belt_Result.flatMap(param[1], (function (allInts) {
                              return Belt_Result.map(ints, (function (ints) {
                                            var needs = allInts.filter(function ($$int) {
                                                  var name = $$int.name;
                                                  if (name !== undefined) {
                                                    return Belt_Array.some(ints, (function ($$int) {
                                                                  var needs = $$int.needs;
                                                                  if (needs !== undefined) {
                                                                    return needs.includes(name);
                                                                  } else {
                                                                    return false;
                                                                  }
                                                                }));
                                                  } else {
                                                    return false;
                                                  }
                                                });
                                            return Belt_Array.concat(ints, needs);
                                          }));
                            }));
              }));
}

function load(param) {
  var kind = Deno.env.get("mode");
  var ints = (kind == null) || kind !== "manual" ? Git.findInts(undefined) : Manual.findInts(undefined);
  var ints$1 = findNeeds(ints);
  return Flat.task(Task.map(ints$1, (function (res) {
                    return Belt_Result.flatMap(res, (function (ints) {
                                  return Job.load(Instance.zip(ints));
                                }));
                  })));
}

export {
  findNeeds ,
  load ,
  
}
/* Git Not a pure module */
