// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Flat from "../std/Flat.js";
import * as Proc from "../std/Proc.js";
import * as Config from "../Config.js";
import * as Belt_Array from "../../../../node_modules/rescript/lib/es6/belt_Array.js";
import * as TaskResult from "../std/TaskResult.js";
import * as Belt_Option from "../../../../node_modules/rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "../../../../node_modules/rescript/lib/es6/belt_Result.js";
import * as Caml_option from "../../../../node_modules/rescript/lib/es6/caml_option.js";

function filter(ints, name, version) {
  return ints.filter(function ($$int) {
              var match = $$int.name;
              var match$1 = $$int.version;
              if (match === undefined) {
                return false;
              }
              if (match$1 === undefined) {
                return false;
              }
              if (name === "*" && version === "*") {
                return true;
              }
              if (version === "*") {
                return match === name;
              } else if (name === "*" || match === name) {
                return match$1 === version;
              } else {
                return false;
              }
            });
}

function findInts(param) {
  console.log("Manual Mode: Create instances from manual args");
  var match = Belt_Option.map(Caml_option.nullable_to_opt(Deno.env.get("component")), (function (param) {
          return param.split("/");
        }));
  var match$1;
  if (match !== undefined) {
    if (match.length !== 2) {
      match$1 = [
        "",
        ""
      ];
    } else {
      var name = match[0];
      var version = match[1];
      match$1 = [
        name,
        version
      ];
    }
  } else {
    match$1 = [
      "",
      ""
    ];
  }
  if (match$1.length !== 2) {
    throw {
          RE_EXN_ID: "Match_failure",
          _1: [
            "Manual.res",
            19,
            6
          ],
          Error: new Error()
        };
  }
  var name$1 = match$1[0];
  var version$1 = match$1[1];
  return TaskResult.flatMap(Proc.run([
                  "git",
                  "ls-files",
                  "**devops.yml",
                  "--recurse-submodules"
                ]), (function (e) {
                return Belt_Result.map(Flat.array(Belt_Array.map(e.trim().split("\n"), Config.loadFile)), (function (conf) {
                              return filter(Belt_Array.concatMany(conf), name$1, version$1);
                            }));
              }));
}

export {
  filter ,
  findInts ,
  
}
/* Config Not a pure module */
