// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "./std/List.js";
import * as $$Option from "./std/Option.js";
import * as Result from "./std/Result.js";
import * as $$String from "./std/String.js";
import * as Caml_option from "../../../node_modules/rescript/lib/es6/caml_option.js";

function getImage(profile, image) {
  var base = Deno.env.get("CICD_DOCKER_BASE");
  var triple = List.fromArray($$String.split(profile, "-"));
  var os;
  if (triple) {
    var exit = 0;
    var match = triple.tl;
    if (match && match.hd === "musl") {
      os = "alpine";
    } else {
      exit = 1;
    }
    if (exit === 1) {
      switch (triple.hd) {
        case "macos" :
            os = "macos";
            break;
        case "linux" :
        case "wasi" :
            os = Caml_option.nullable_to_opt(Deno.env.get("CICD_DOCKER_DISTRO"));
            break;
        case "windows" :
            os = "windows";
            break;
        default:
          os = undefined;
      }
    }
    
  } else {
    os = undefined;
  }
  var arch;
  if (triple) {
    var match$1 = triple.tl;
    if (match$1) {
      switch (match$1.hd) {
        case "armv8" :
            arch = "armv8";
            break;
        case "wasm" :
        case "x86_64" :
            arch = "x86_64";
            break;
        default:
          arch = undefined;
      }
    } else {
      arch = undefined;
    }
  } else {
    arch = undefined;
  }
  if (image !== undefined) {
    return image;
  } else {
    return $$Option.map($$Option.seq3([
                    (base == null) ? undefined : Caml_option.some(base),
                    os,
                    arch
                  ]), (function (param) {
                  return param[0] + param[1] + "-" + param[2];
                }));
  }
}

function getDockerPlatform(profile) {
  var match = $$String.split(profile, "-");
  if (match.length !== 2) {
    throw {
          RE_EXN_ID: "Match_failure",
          _1: [
            "Profile.res",
            31,
            6
          ],
          Error: new Error()
        };
  }
  var os = match[0];
  var arch = match[1];
  var os$1;
  switch (os) {
    case "linux" :
        os$1 = {
          TAG: /* Ok */0,
          _0: "linux"
        };
        break;
    case "macos" :
        os$1 = {
          TAG: /* Error */1,
          _0: "MacOS / Darwin builds are not yet supported"
        };
        break;
    case "windows" :
        os$1 = {
          TAG: /* Error */1,
          _0: "Windows builds are not yet supported"
        };
        break;
    default:
      os$1 = {
        TAG: /* Error */1,
        _0: "Could not parse profile " + profile + " to an os."
      };
  }
  var arch$1;
  switch (arch) {
    case "86-64" :
    case "86_64" :
        arch$1 = {
          TAG: /* Ok */0,
          _0: "amd64"
        };
        break;
    case "arm7" :
    case "armhf" :
        arch$1 = {
          TAG: /* Ok */0,
          _0: "arm/v7"
        };
        break;
    case "arm64" :
    case "armv8" :
        arch$1 = {
          TAG: /* Ok */0,
          _0: "arm64"
        };
        break;
    default:
      arch$1 = {
        TAG: /* Error */1,
        _0: "Could not parse profile " + profile + " to an arch."
      };
  }
  return Result.map(Result.seq2([
                  os$1,
                  arch$1
                ]), (function (param) {
                return param[0] + " /" + param[1];
              }));
}

export {
  getImage ,
  getDockerPlatform ,
  
}
/* No side effect */
