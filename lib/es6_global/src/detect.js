// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_List from "../../../node_modules/rescript/lib/es6/belt_List.js";

function getImage(param) {
  var profile = Belt_List.fromArray(param.profile.split("-"));
  var os;
  if (profile) {
    var exit = 0;
    var match = profile.tl;
    if (match && match.hd === "musl") {
      os = {
        TAG: /* Ok */0,
        _0: "alpine"
      };
    } else {
      exit = 1;
    }
    if (exit === 1) {
      switch (profile.hd) {
        case "macos" :
            os = {
              TAG: /* Ok */0,
              _0: "macos"
            };
            break;
        case "linux" :
        case "wasi" :
            os = {
              TAG: /* Ok */0,
              _0: "bionic"
            };
            break;
        case "windows" :
            os = {
              TAG: /* Ok */0,
              _0: "windows"
            };
            break;
        default:
          os = {
            TAG: /* Error */1,
            _0: "Could not detect image os"
          };
      }
    }
    
  } else {
    os = {
      TAG: /* Error */1,
      _0: "Could not detect image os"
    };
  }
  var arch;
  if (profile) {
    var match$1 = profile.tl;
    if (match$1) {
      switch (match$1.hd) {
        case "armv8" :
            arch = match$1.tl ? ({
                  TAG: /* Error */1,
                  _0: "Could not detect image arch"
                }) : ({
                  TAG: /* Ok */0,
                  _0: "armv8"
                });
            break;
        case "wasm" :
        case "x86_64" :
            arch = match$1.tl ? ({
                  TAG: /* Error */1,
                  _0: "Could not detect image arch"
                }) : ({
                  TAG: /* Ok */0,
                  _0: "x86_64"
                });
            break;
        default:
          arch = {
            TAG: /* Error */1,
            _0: "Could not detect image arch"
          };
      }
    } else {
      arch = {
        TAG: /* Error */1,
        _0: "Could not detect image arch"
      };
    }
  } else {
    arch = {
      TAG: /* Error */1,
      _0: "Could not detect image arch"
    };
  }
  var match$2 = param.int.bootstrap;
  var end = match$2 !== undefined && match$2 ? "-bootstrap" : "";
  if (os.TAG === /* Ok */0) {
    if (arch.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: "aivero/conan:" + os._0 + "-" + arch._0 + end
            };
    } else {
      return {
              TAG: /* Error */1,
              _0: arch._0
            };
    }
  } else {
    return {
            TAG: /* Error */1,
            _0: os._0
          };
  }
}

function getRunnerTags(profile) {
  var match = profile.split("-");
  if (match.length !== 2) {
    throw {
          RE_EXN_ID: "Match_failure",
          _1: [
            "detect.res",
            34,
            6
          ],
          Error: new Error()
        };
  }
  var arch = match[1];
  switch (arch) {
    case "armv8" :
        return {
                TAG: /* Ok */0,
                _0: [
                  "ARM64",
                  "aws"
                ]
              };
    case "wasm" :
    case "x86_64" :
        return {
                TAG: /* Ok */0,
                _0: [
                  "X64",
                  "aws"
                ]
              };
    default:
      return {
              TAG: /* Error */1,
              _0: "Could detect runner tags for profile"
            };
  }
}

function getDockerPlatform(profile) {
  var match = profile.split("-");
  if (match.length !== 2) {
    throw {
          RE_EXN_ID: "Match_failure",
          _1: [
            "detect.res",
            45,
            6
          ],
          Error: new Error()
        };
  }
  var os = match[0];
  var arch = match[1];
  var os$1;
  switch (os) {
    case "linux" :
        os$1 = {
          TAG: /* Ok */0,
          _0: "linux"
        };
        break;
    case "macos" :
        os$1 = {
          TAG: /* Error */1,
          _0: "MacOS / Darwin builds are not yet supported"
        };
        break;
    case "windows" :
        os$1 = {
          TAG: /* Error */1,
          _0: "Windows builds are not yet supported"
        };
        break;
    default:
      os$1 = {
        TAG: /* Error */1,
        _0: "Could not parse profile " + profile + " to an os."
      };
  }
  var arch$1;
  switch (arch) {
    case "86-64" :
    case "86_64" :
        arch$1 = {
          TAG: /* Ok */0,
          _0: "amd64"
        };
        break;
    case "arm7" :
    case "armhf" :
        arch$1 = {
          TAG: /* Ok */0,
          _0: "arm/v7"
        };
        break;
    case "arm64" :
    case "armv8" :
        arch$1 = {
          TAG: /* Ok */0,
          _0: "arm64"
        };
        break;
    default:
      arch$1 = {
        TAG: /* Error */1,
        _0: "Could not parse profile " + profile + " to an arch."
      };
  }
  if (os$1.TAG === /* Ok */0) {
    if (arch$1.TAG === /* Ok */0) {
      return {
              TAG: /* Ok */0,
              _0: os$1._0 + " /" + arch$1._0
            };
    } else {
      return {
              TAG: /* Error */1,
              _0: arch$1._0
            };
    }
  } else {
    return {
            TAG: /* Error */1,
            _0: os$1._0
          };
  }
}

export {
  getImage ,
  getRunnerTags ,
  getDockerPlatform ,
  
}
/* No side effect */
