// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Flat from "./std/Flat.js";
import * as Path from "path";
import * as Caml_obj from "../../../node_modules/rescript/lib/es6/caml_obj.js";
import * as Belt_Array from "../../../node_modules/rescript/lib/es6/belt_Array.js";
import * as Belt_Result from "../../../node_modules/rescript/lib/es6/belt_Result.js";
import * as Caml_option from "../../../node_modules/rescript/lib/es6/caml_option.js";

var empty = {
  name: undefined,
  version: undefined,
  commit: undefined,
  branch: undefined,
  folder: undefined,
  cmdsPre: undefined,
  cmds: undefined,
  cmdsPost: undefined,
  image: undefined,
  tags: undefined,
  mode: undefined,
  req: undefined,
  revReq: undefined,
  profiles: undefined,
  settings: undefined,
  options: undefined,
  bootstrap: undefined,
  debugPkg: undefined,
  conanInstall: undefined,
  subdir: undefined,
  script: undefined,
  tag: undefined,
  platform: undefined,
  dockerfile: undefined
};

function validate(conf) {
  var profiles = conf.profiles;
  if (profiles !== undefined) {
    if (profiles.length > 0) {
      return {
              TAG: /* Ok */0,
              _0: conf
            };
    } else {
      return {
              TAG: /* Error */1,
              _0: "Empty profiles"
            };
    }
  } else {
    return {
            TAG: /* Error */1,
            _0: "No profiles"
          };
  }
}

function create(folderPath, $$int) {
  var $$int$1 = ($$int == null) ? empty : $$int;
  var newrecord = Caml_obj.caml_obj_dup($$int$1);
  var profiles = $$int$1.profiles;
  newrecord.profiles = profiles !== undefined ? profiles : [
      "linux-x86_64",
      "linux-armv8"
    ];
  var folder = $$int$1.folder;
  newrecord.folder = folder !== undefined ? Path.join(folderPath, folder) : folderPath;
  var branch = $$int$1.branch;
  newrecord.branch = branch !== undefined ? branch : Caml_option.nullable_to_opt(Deno.env.get("CI_COMMIT_REF_NAME"));
  var commit = $$int$1.commit;
  newrecord.commit = commit !== undefined ? commit : Caml_option.nullable_to_opt(Deno.env.get("CI_COMMIT_SHA"));
  var version = $$int$1.version;
  newrecord.version = version !== undefined ? version : Caml_option.nullable_to_opt(Deno.env.get("CI_COMMIT_SHA"));
  var name = $$int$1.name;
  newrecord.name = name !== undefined ? name : Path.basename(folderPath);
  return validate(newrecord);
}

function parseMode(str) {
  switch (str) {
    case "conan" :
        return "conan";
    case "conan-install-script" :
        return "conan-install-script";
    case "conan-install-tarball" :
        return "conan-install-tarball";
    case "docker" :
        return "docker";
    default:
      return "command";
  }
}

function getMode($$int) {
  var match = $$int.mode;
  var match$1 = $$int.folder;
  if (match !== undefined) {
    return parseMode(match);
  } else if (match$1 !== undefined) {
    if (Fs.existsSync(Path.join(match$1, "conanfile.py"))) {
      return "conan";
    } else if (Fs.existsSync(Path.join(match$1, "Dockerfile"))) {
      return "docker";
    } else {
      return "command";
    }
  } else {
    return "command";
  }
}

function zip(ints) {
  return Belt_Result.map(Flat.array(Belt_Array.map(ints, (function ($$int) {
                        var profiles = $$int.profiles;
                        if (profiles !== undefined) {
                          return {
                                  TAG: /* Ok */0,
                                  _0: Belt_Array.map(profiles, (function (profile) {
                                          return {
                                                  int: $$int,
                                                  profile: profile,
                                                  mode: getMode($$int)
                                                };
                                        }))
                                };
                        } else {
                          return {
                                  TAG: /* Error */1,
                                  _0: "No profiles"
                                };
                        }
                      }))), Belt_Array.concatMany);
}

export {
  empty ,
  validate ,
  create ,
  parseMode ,
  getMode ,
  zip ,
  
}
/* fs Not a pure module */
