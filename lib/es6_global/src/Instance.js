// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Path from "./std/Path.js";
import * as Yaml from "./std/Yaml.js";
import * as Path$1 from "path";
import * as Belt_Array from "../../../node_modules/rescript/lib/es6/belt_Array.js";
import * as Caml_option from "../../../node_modules/rescript/lib/es6/caml_option.js";

function parseMode(str) {
  switch (str) {
    case "conan" :
        return "conan";
    case "docker" :
        return "docker";
    default:
      return "command";
  }
}

function create($$int, folderPath) {
  var name = Yaml.get($$int, "name");
  var name$1;
  name$1 = typeof name === "number" || name.TAG !== /* String */0 ? Path$1.basename(folderPath) : name._0;
  var match = Yaml.get($$int, "version");
  var match$1 = Deno.env.get("CI_COMMIT_SHA");
  var version;
  if (typeof match === "number") {
    version = (match$1 == null) ? "0.0.0" : match$1;
  } else {
    switch (match.TAG | 0) {
      case /* String */0 :
          version = match._0;
          break;
      case /* Number */1 :
          version = String(match._0);
          break;
      default:
        version = (match$1 == null) ? "0.0.0" : match$1;
    }
  }
  var folder = Yaml.get($$int, "folder");
  var folder$1;
  folder$1 = typeof folder === "number" || folder.TAG !== /* String */0 ? folderPath : Path$1.join(folderPath, folder._0);
  var mode = Yaml.get($$int, "mode");
  var mode$1;
  var exit = 0;
  if (typeof mode === "number" || mode.TAG !== /* String */0) {
    exit = 1;
  } else {
    mode$1 = parseMode(mode._0);
  }
  if (exit === 1) {
    mode$1 = Fs.existsSync(Path$1.join(folder$1, "conanfile.py")) ? "conan" : (
        Belt_Array.some(Path.read(folder$1), (function (file) {
                return file.name.includes("Dockerfile");
              })) ? "docker" : "command"
      );
  }
  var modeInt = mode$1 === "conan" ? Yaml.get($$int, "conan") : (
      mode$1 === "docker" ? Yaml.get($$int, "docker") : /* Null */0
    );
  var commit = Yaml.get($$int, "commit");
  var commit$1;
  commit$1 = typeof commit === "number" || commit.TAG !== /* String */0 ? Caml_option.nullable_to_opt(Deno.env.get("CI_COMMIT_SHA")) : commit._0;
  var branch = Yaml.get($$int, "branch");
  var branch$1;
  branch$1 = typeof branch === "number" || branch.TAG !== /* String */0 ? Caml_option.nullable_to_opt(Deno.env.get("CI_COMMIT_REF_NAME")) : branch._0;
  var reqs = Yaml.get($$int, "reqs");
  var reqs$1;
  reqs$1 = typeof reqs === "number" ? [] : (
      reqs.TAG === /* Array */3 ? reqs._0.reduce((function (reqs, req) {
                if (typeof req === "number") {
                  return [];
                } else if (req.TAG === /* String */0) {
                  return reqs.concat([req._0]);
                } else {
                  return [];
                }
              }), []) : []
    );
  var reqs$2 = Yaml.get($$int, "revReqs");
  var revReqs;
  revReqs = typeof reqs$2 === "number" ? [] : (
      reqs$2.TAG === /* Array */3 ? reqs$2._0.reduce((function (reqs, req) {
                if (typeof req === "number") {
                  return [];
                } else if (req.TAG === /* String */0) {
                  return reqs.concat([req._0]);
                } else {
                  return [];
                }
              }), []) : []
    );
  var bool = Yaml.get($$int, "bootstrap");
  var bootstrap;
  bootstrap = typeof bool === "number" || bool.TAG !== /* Bool */4 ? false : bool._0;
  var image = Yaml.get($$int, "image");
  var image$1;
  image$1 = typeof image === "number" || image.TAG !== /* String */0 ? undefined : image._0;
  var tags = Yaml.get($$int, "tags");
  var tags$1;
  tags$1 = typeof tags === "number" ? [] : (
      tags.TAG === /* Array */3 ? tags._0.reduce((function (tags, tag) {
                if (typeof tag === "number") {
                  return [];
                } else if (tag.TAG === /* String */0) {
                  return tags.concat([tag._0]);
                } else {
                  return [];
                }
              }), []) : []
    );
  var profiles = Yaml.get($$int, "profiles");
  var profiles$1;
  profiles$1 = typeof profiles === "number" ? [
      "linux-x86_64",
      "linux-armv8"
    ] : (
      profiles.TAG === /* Array */3 ? profiles._0.reduce((function (array, profile) {
                if (typeof profile === "number" || profile.TAG !== /* String */0) {
                  return array;
                } else {
                  return [profile._0].concat(array);
                }
              }), []) : [
          "linux-x86_64",
          "linux-armv8"
        ]
    );
  var cmds = Yaml.get($$int, "cmdsPre");
  var cmdsPre;
  cmdsPre = typeof cmds === "number" ? [] : (
      cmds.TAG === /* Array */3 ? cmds._0.reduce((function (cmds, cmd) {
                if (typeof cmd === "number") {
                  return [];
                } else if (cmd.TAG === /* String */0) {
                  return cmds.concat([cmd._0]);
                } else {
                  return [];
                }
              }), []) : []
    );
  var cmds$1 = Yaml.get($$int, "cmds");
  var cmds$2;
  cmds$2 = typeof cmds$1 === "number" ? [] : (
      cmds$1.TAG === /* Array */3 ? cmds$1._0.reduce((function (cmds, cmd) {
                if (typeof cmd === "number") {
                  return [];
                } else if (cmd.TAG === /* String */0) {
                  return cmds.concat([cmd._0]);
                } else {
                  return [];
                }
              }), []) : []
    );
  var cmds$3 = Yaml.get($$int, "cmdsPost");
  var cmdsPost;
  cmdsPost = typeof cmds$3 === "number" ? [] : (
      cmds$3.TAG === /* Array */3 ? cmds$3._0.reduce((function (cmds, cmd) {
                if (typeof cmd === "number") {
                  return [];
                } else if (cmd.TAG === /* String */0) {
                  return cmds.concat([cmd._0]);
                } else {
                  return [];
                }
              }), []) : []
    );
  return {
          name: name$1,
          version: version,
          folder: folder$1,
          mode: mode$1,
          modeInt: modeInt,
          commit: commit$1,
          branch: branch$1,
          reqs: reqs$1,
          revReqs: revReqs,
          bootstrap: bootstrap,
          profiles: profiles$1,
          cmdsPre: cmdsPre,
          cmds: cmds$2,
          cmdsPost: cmdsPost,
          image: image$1,
          tags: tags$1
        };
}

export {
  parseMode ,
  create ,
  
}
/* fs Not a pure module */
